--Services
local lp = game:GetService("Players").LocalPlayer
local TS = game:GetService("TweenService")
local rs = game:GetService("RunService")
local uis = game:GetService("UserInputService")

--Variables
local mouse = lp:GetMouse()
local viewport = workspace.CurrentCamera.ViewportSize
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

local Library = {}

function Library:Validate(defaults, options)
	for i, v in pairs(defaults) do
		if not options[i] then
			options[i] = v
		end
	end
	return options
end

function Library:tween(obj, goal, callback)
	local tween = TS:Create(obj, tweenInfo, goal)
	tween.Completed:Connect(callback or function() end)
	tween:Play()
	return tween
end

function Library:RandomName()
	local length = math.random(30, 50)
	local name = {}

	for i = 0, length do
		local char = string.char(math.random(0, 255))
		name[i] = char
	end

	return table.concat(name)
end

function Library:Destroy()
	for i, v in pairs(Library) do
		if typeof(v) == "Instance" then
			v:Destroy()
			Library[i] = nil
		else
			Library[i] = nil
		end
	end
end

--Library._UI
Library["_UI"] = Instance.new("ScreenGui");

Library["_UI"].IgnoreGuiInset = true
Library["_UI"].ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets
Library["_UI"].ResetOnSpawn = false
Library["_UI"].Name = Library:RandomName()
Library["_UI"].Parent = rs:IsStudio() and lp:WaitForChild("PlayerGui") or game:GetService("CoreGui")

--Notification
Library["_Notifications"] = Instance.new("Frame");
Library["_UIPadding15"] = Instance.new("UIPadding");
Library["_Notify"] = Instance.new("Frame");
Library["_UICorner21"] = Instance.new("UICorner");
Library["_UIStroke12"] = Instance.new("UIStroke");
Library["_Description"] = Instance.new("TextLabel");
Library["_UIPadding16"] = Instance.new("UIPadding");
Library["_Title7"] = Instance.new("TextLabel");
Library["_UIPadding17"] = Instance.new("UIPadding");

Library["_Notifications"].AnchorPoint = Vector2.new(1, 0)
Library["_Notifications"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Library["_Notifications"].BackgroundTransparency = 1
Library["_Notifications"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Notifications"].BorderSizePixel = 0
Library["_Notifications"].Position = UDim2.new(1, 0, 0, 0)
Library["_Notifications"].Size = UDim2.new(0.238322213, 0, 1, 0)
Library["_Notifications"].Name = Library:RandomName()
Library["_Notifications"].Parent = Library["_UI"]

Library["_UIPadding15"].PaddingBottom = UDim.new(0, 10)
Library["_UIPadding15"].PaddingRight = UDim.new(0, 10)
Library["_UIPadding15"].Name = Library:RandomName()
Library["_UIPadding15"].Parent = Library["_Notifications"]

Library["_Notify"].AnchorPoint = Vector2.new(0.5, 1)
Library["_Notify"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
Library["_Notify"].BackgroundTransparency = 0.5
Library["_Notify"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Notify"].BorderSizePixel = 0
Library["_Notify"].Position = UDim2.new(1.5, 6, 1, 0)
Library["_Notify"].Size = UDim2.new(0.959999979, 0, 0.101214573, 0)
Library["_Notify"].Name = Library:RandomName()
Library["_Notify"].Parent = Library["_UI"]

Library["_UICorner21"].CornerRadius = UDim.new(0, 4)
Library["_UICorner21"].Name = Library:RandomName()
Library["_UICorner21"].Parent = Library["_Notify"]

Library["_UIStroke12"].Color = Color3.fromRGB(40.00000141561031, 40.00000141561031, 40.00000141561031)
Library["_UIStroke12"].Thickness = 3
Library["_UIStroke12"].Name = Library:RandomName()
Library["_UIStroke12"].Parent = Library["_Notify"]

Library["_Description"].Font = Enum.Font.Ubuntu
Library["_Description"].Text = "Description"
Library["_Description"].TextColor3 = Color3.fromRGB(255, 255, 255)
Library["_Description"].TextScaled = true
Library["_Description"].TextSize = 20
Library["_Description"].TextWrapped = true
Library["_Description"].TextXAlignment = Enum.TextXAlignment.Left
Library["_Description"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Library["_Description"].BackgroundTransparency = 1
Library["_Description"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Description"].BorderSizePixel = 0
Library["_Description"].Position = UDim2.new(0, 0, 0.5, 0)
Library["_Description"].Size = UDim2.new(1, 0, 0.5, 0)
Library["_Description"].Name = Library:RandomName()
Library["_Description"].Parent = Library["_Notify"]

Library["_UIPadding16"].PaddingLeft = UDim.new(0, 10)
Library["_UIPadding16"].PaddingBottom = UDim.new(0, 2)
Library["_UIPadding16"].Name = Library:RandomName()
Library["_UIPadding16"].Parent = Library["_Description"]

Library["_Title7"].Font = Enum.Font.Unknown
Library["_Title7"].RichText = true
Library["_Title7"].Text = "<b>Title</b>"
Library["_Title7"].TextColor3 = Color3.fromRGB(255, 255, 255)
Library["_Title7"].TextScaled = true
Library["_Title7"].TextSize = 25
Library["_Title7"].TextWrapped = true
Library["_Title7"].TextXAlignment = Enum.TextXAlignment.Left
Library["_Title7"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Library["_Title7"].BackgroundTransparency = 1
Library["_Title7"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Title7"].BorderSizePixel = 0
Library["_Title7"].Position = UDim2.new(0, 0, 0, 0)
Library["_Title7"].Size = UDim2.new(1, 0, 0.5, 0)
Library["_Title7"].Name = Library:RandomName()
Library["_Title7"].Parent = Library["_Notify"]

Library["_UIPadding17"].PaddingLeft = UDim.new(0, 10)
Library["_UIPadding17"].PaddingTop = UDim.new(0, 2)
Library["_UIPadding17"].Name = Library:RandomName()
Library["_UIPadding17"].Parent = Library["_Title7"]

local maxNotifications = 5
local notificationPadding = 13

local queuedNotifications = {}

local function NotificationUpTween(notificationFrame: Frame)

	local offsetY = (Library["_Notifications"].AbsoluteSize.Y * notificationFrame.Size.Y.Scale + notificationFrame.Size.Y.Offset) + notificationPadding
	local scaleY = offsetY / Library["_Notifications"].AbsoluteSize.Y
	local newY = notificationFrame.Position.Y.Scale - scaleY

	local goalProperties = {
		Position = UDim2.new(0.5, 0, newY, 0);
	}
	local tween = Library.tween and Library:tween(notificationFrame, goalProperties)
end

local function NotificationInTween(notificationFrame: Frame)

	local goalProperties = {
		Position = UDim2.new(0.5, 0, 1, 0);
	}

	local tween = Library.tween and Library:tween(notificationFrame, goalProperties)

	if tween then tween.Completed:Wait() end
end

local function NotificationOutTween(notificationFrame: Frame)

	notificationFrame.Name = "Removing"

	local goalProperties = {
		Position = UDim2.new(1.5, 6, notificationFrame.Position.Y.Scale, 0);
	}

	local tween = Library.tween and Library:tween(notificationFrame, goalProperties)

	if tween then
		tween.Completed:Wait()

		notificationFrame:Destroy()
	end
end


local function ShiftNotificationsUp()

	local existingNotifications = {}

	for _, child in pairs(Library["_Notifications"]:GetChildren()) do

		if child:IsA("Frame") and child.Name ~= "Removing" then
			table.insert(existingNotifications, child)
		end
	end

	table.sort(existingNotifications, function(a, b)
		return a.AbsolutePosition.Y < b.AbsolutePosition.Y
	end)

	if #existingNotifications >= maxNotifications then

		for i = 1, #existingNotifications - maxNotifications + 1 do

			local existingNotification = existingNotifications[i]
			NotificationOutTween(existingNotification)
		end
	end

	for _, notificationFrame in pairs(existingNotifications) do
		NotificationUpTween(notificationFrame)
	end

	task.wait(tweenInfo.Time)
end


function Library:CreateNotification(options: {Title: string, Description: string, Time: number, SoundId: string | number, Color: Color3})
	options = Library:Validate(
		{
			Title = "Title",
			Description = "Description",
			Time = 8,
			SoundId = "rbxassetid://6026984224",
			Color = Color3.new(255, 255, 255)
		}, options or {})

	table.insert(queuedNotifications, options)

	while table.find(queuedNotifications, options) ~= 1 do
		rs.Heartbeat:Wait()
	end

	local soundObject = Instance.new("Sound")
	soundObject.SoundId = options.SoundId
	soundObject.Parent = script
	soundObject:Play()

	soundObject.Ended:Connect(function()
		soundObject:Destroy()
	end)

	task.wait(0.5)

	ShiftNotificationsUp()

	local notificationFrame = Library["_Notify"]:Clone()
	local title = notificationFrame[Library["_Title7"].Name]
	local descrition = notificationFrame[Library["_Description"].Name]

	notificationFrame.Name = Library:RandomName()
	title.Name = Library:RandomName()
	title.RichText = true
	descrition.Name = Library:RandomName()

	title.Text = "<b>"..options.Title.."</b>"
	title.TextColor3 = options.Color
	descrition.Text = options.Description
	notificationFrame.Parent = Library["_Notifications"]

	task.spawn(NotificationInTween, notificationFrame)

	table.remove(queuedNotifications, 1)

	task.spawn(function()

		task.wait(options.Time)
		NotificationOutTween(notificationFrame)
	end)
end


function Library:Init(options)
	options = Library:Validate(
		{
			Name = "Wayfer Library"
		}, options or {})

	local GUI = {
		CurrentTab = nil
	}


	--Main Frame
	do
		GUI["_Main"] = Instance.new("Frame");
		GUI["_UICorner"] = Instance.new("UICorner");
		GUI["_DropShadowHolder"] = Instance.new("Frame");
		GUI["_DropShadow"] = Instance.new("ImageLabel");
		GUI["_HeadBar"] = Instance.new("Frame");
		GUI["_UICorner1"] = Instance.new("UICorner");
		GUI["_Hide"] = Instance.new("Frame");
		GUI["_Close"] = Instance.new("ImageLabel");
		GUI["_Button"] = Instance.new("ImageButton");
		GUI["_UICorner5"] = Instance.new("UICorner");
		GUI["_UICorner3"] = Instance.new("UICorner");
		GUI["_Minimize"] = Instance.new("ImageLabel");
		GUI["_Button1"] = Instance.new("ImageButton");
		GUI["_UICorner6"] = Instance.new("UICorner");
		GUI["_UICorner7"] = Instance.new("UICorner");
		GUI["_Name"] = Instance.new("TextLabel");
		GUI["_UIPadding"] = Instance.new("UIPadding");
		GUI["_Dragger"] = Instance.new("ImageButton");
		GUI["_UICorner4"] = Instance.new("UICorner");
		GUI["_ContentContainer"] = Instance.new("Frame");

		do
			--Boot Animation
			GUI["_Boot"] = Instance.new("Frame");
			GUI["_Left"] = Instance.new("Frame");
			GUI["_Logo"] = Instance.new("ImageLabel");
			GUI["_Right"] = Instance.new("Frame");
			GUI["_Logo1"] = Instance.new("ImageLabel");

			GUI["_Boot"].AnchorPoint = Vector2.new(0.5, 0.5)
			GUI["_Boot"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Boot"].BackgroundTransparency = 1
			GUI["_Boot"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Boot"].BorderSizePixel = 0
			GUI["_Boot"].Position = UDim2.new(0.5, 0, 0.5, 0)
			GUI["_Boot"].Size = UDim2.new(0, 400, 0, 400)
			GUI["_Boot"].Name = Library:RandomName()
			GUI["_Boot"].Parent = Library["_UI"]

			GUI["_Left"].AnchorPoint = Vector2.new(1, 0.5)
			GUI["_Left"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Left"].BackgroundTransparency = 1
			GUI["_Left"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Left"].BorderSizePixel = 0
			GUI["_Left"].ClipsDescendants = true
			GUI["_Left"].Position = UDim2.new(0.5, 0, 0.5, 0)
			GUI["_Left"].Size = UDim2.new(0, 0, 0, 400)
			GUI["_Left"].Name = Library:RandomName()
			GUI["_Left"].Parent = GUI["_Boot"]

			GUI["_Logo"].Image = "rbxassetid://133601166692855"
			GUI["_Logo"].AnchorPoint = Vector2.new(1, 0.5)
			GUI["_Logo"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Logo"].BackgroundTransparency = 1
			GUI["_Logo"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Logo"].BorderSizePixel = 0
			GUI["_Logo"].Position = UDim2.new(1, 200, 0.5, 0)
			GUI["_Logo"].Size = UDim2.new(0, 400, 0, 400)
			GUI["_Logo"].Name = Library:RandomName()
			GUI["_Logo"].Parent = GUI["_Left"]

			GUI["_Right"].AnchorPoint = Vector2.new(0, 0.5)
			GUI["_Right"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Right"].BackgroundTransparency = 1
			GUI["_Right"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Right"].BorderSizePixel = 0
			GUI["_Right"].ClipsDescendants = true
			GUI["_Right"].Position = UDim2.new(0.5, 0, 0.5, 0)
			GUI["_Right"].Size = UDim2.new(0, 0, 0, 400)
			GUI["_Right"].Name = Library:RandomName()
			GUI["_Right"].Parent = GUI["_Boot"]

			GUI["_Logo1"].Image = "rbxassetid://133601166692855"
			GUI["_Logo1"].AnchorPoint = Vector2.new(0, 0.5)
			GUI["_Logo1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Logo1"].BackgroundTransparency = 1
			GUI["_Logo1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Logo1"].BorderSizePixel = 0
			GUI["_Logo1"].Position = UDim2.new(0, -200, 0.5, 0)
			GUI["_Logo1"].Size = UDim2.new(0, 400, 0, 400)
			GUI["_Logo1"].Name = Library:RandomName()
			GUI["_Logo1"].Parent = GUI["_Right"]


			local tweenL = TS:Create(GUI["_Left"], TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 200, 0, 400)})
			local tweenR = TS:Create(GUI["_Right"], TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 200, 0, 400)})
			tweenL:Play()
			tweenR:Play()
			tweenL.Completed:Wait()
			task.wait(2)
			GUI["_Boot"]:Destroy()
		end

		GUI["_Main"].AnchorPoint = Vector2.new(0, 0)
		GUI["_Main"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
		GUI["_Main"].BackgroundTransparency = 0.5
		GUI["_Main"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Main"].BorderSizePixel = 0
		GUI["_Main"].Size = UDim2.new(0.571, 0, 0.81, 0)
		GUI["_Main"].Position = UDim2.fromOffset((viewport.X / 2) - ((GUI["_Main"].Size.X.Scale * viewport.X) / 2), (viewport.Y / 2) - ((GUI["_Main"].Size.Y.Scale * viewport.Y) / 2))
		GUI["_Main"].Name = Library:RandomName()
		GUI["_Main"].Parent = Library["_UI"]

		GUI["_UICorner"].Name = Library:RandomName()
		GUI["_UICorner"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner"].Parent = GUI["_Main"]

		GUI["_DropShadowHolder"].BackgroundTransparency = 1
		GUI["_DropShadowHolder"].BorderSizePixel = 0
		GUI["_DropShadowHolder"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_DropShadowHolder"].ZIndex = 0
		GUI["_DropShadowHolder"].Name = Library:RandomName()
		GUI["_DropShadowHolder"].Parent = GUI["_Main"]

		GUI["_DropShadow"].Image = "rbxassetid://6014261993"
		GUI["_DropShadow"].ImageColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_DropShadow"].ImageTransparency = 0.5
		GUI["_DropShadow"].ScaleType = Enum.ScaleType.Slice
		GUI["_DropShadow"].SliceCenter = Rect.new(49, 49, 450, 450)
		GUI["_DropShadow"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_DropShadow"].BackgroundTransparency = 1
		GUI["_DropShadow"].BorderSizePixel = 0
		GUI["_DropShadow"].Position = UDim2.new(0.5, 0, 0.5, 0)
		GUI["_DropShadow"].Size = UDim2.new(1, 47, 1, 47)
		GUI["_DropShadow"].ZIndex = 0
		GUI["_DropShadow"].Name = Library:RandomName()
		GUI["_DropShadow"].Parent = GUI["_DropShadowHolder"]

		GUI["_HeadBar"].BackgroundColor3 = Color3.fromRGB(30.00000201165676, 30.00000201165676, 30.00000201165676)
		GUI["_HeadBar"].BackgroundTransparency = 0.5
		GUI["_HeadBar"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_HeadBar"].BorderSizePixel = 0
		GUI["_HeadBar"].Size = UDim2.new(1, 0, 0, 30)
		GUI["_HeadBar"].Name = Library:RandomName()
		GUI["_HeadBar"].Parent = GUI["_Main"]

		GUI["_UICorner1"].Name = Library:RandomName()
		GUI["_UICorner1"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner1"].Parent = GUI["_HeadBar"]

		GUI["_Hide"].AnchorPoint = Vector2.new(0, 1)
		GUI["_Hide"].BackgroundColor3 = Color3.fromRGB(30.00000011175871, 30.00000011175871, 30.00000011175871)
		GUI["_Hide"].BackgroundTransparency = 0.5
		GUI["_Hide"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Hide"].BorderSizePixel = 0
		GUI["_Hide"].Position = UDim2.new(0, 0, 1, 0)
		GUI["_Hide"].Size = UDim2.new(1, 0, 0.1, 0)
		GUI["_Hide"].Name = Library:RandomName()
		GUI["_Hide"].Parent = GUI["_HeadBar"]

		GUI["_Close"].Image = "rbxassetid://18756175936"
		GUI["_Close"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Close"].BackgroundColor3 = Color3.fromRGB(163, 5, 5)
		GUI["_Close"].BackgroundTransparency = 1
		GUI["_Close"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Close"].BorderSizePixel = 0
		GUI["_Close"].Position = UDim2.new(1, -20, 1, -15)
		GUI["_Close"].Size = UDim2.new(0, 20, 0, 20)
		GUI["_Close"].ZIndex = 2
		GUI["_Close"].Name = Library:RandomName()
		GUI["_Close"].Parent = GUI["_HeadBar"]

		GUI["_Button"].ImageTransparency = 1
		GUI["_Button"].BackgroundTransparency = 1
		GUI["_Button"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Button"].Position = UDim2.new(0.5, 0, 0.5, 0)
		GUI["_Button"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_Button"].Name = Library:RandomName()
		GUI["_Button"].Parent = GUI["_Close"]

		GUI["_UICorner5"].Name = Library:RandomName()
		GUI["_UICorner5"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner5"].Parent = GUI["_Button"]

		GUI["_UICorner3"].Name = Library:RandomName()
		GUI["_UICorner3"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner3"].Parent = GUI["_Close"]

		GUI["_Minimize"].Image = "rbxassetid://18756204039"
		GUI["_Minimize"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Minimize"].BackgroundColor3 = Color3.fromRGB(122, 122, 122)
		GUI["_Minimize"].BackgroundTransparency = 1
		GUI["_Minimize"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Minimize"].BorderSizePixel = 0
		GUI["_Minimize"].Position = UDim2.new(1, -50, 1, -15)
		GUI["_Minimize"].Size = UDim2.new(0, 20, 0, 20)
		GUI["_Minimize"].ZIndex = 2
		GUI["_Minimize"].Name = Library:RandomName()
		GUI["_Minimize"].Parent = GUI["_HeadBar"]

		GUI["_Button1"].ImageTransparency = 1
		GUI["_Button1"].BackgroundTransparency = 1
		GUI["_Button1"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Button1"].Position = UDim2.new(0.5, 0, 0.5, 0)
		GUI["_Button1"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_Button1"].Name = Library:RandomName()
		GUI["_Button1"].Parent = GUI["_Minimize"]

		GUI["_UICorner6"].Name = Library:RandomName()
		GUI["_UICorner6"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner6"].Parent = GUI["_Button1"]

		GUI["_UICorner7"].Name = Library:RandomName()
		GUI["_UICorner7"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner7"].Parent = GUI["_Minimize"]

		GUI["_UIPadding"].Name = Library:RandomName()
		GUI["_UIPadding"].PaddingLeft = UDim.new(0, 8)
		GUI["_UIPadding"].PaddingTop = UDim.new(0, -4)
		GUI["_UIPadding"].Parent = GUI["_Name"]

		GUI["_Name"].Font = Enum.Font.Ubuntu
		GUI["_Name"].Text = options.Name
		GUI["_Name"].TextColor3 = Color3.fromRGB(255, 255, 255)
		GUI["_Name"].TextSize = 20
		GUI["_Name"].TextWrapped = false
		GUI["_Name"].TextXAlignment = Enum.TextXAlignment.Left
		GUI["_Name"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		GUI["_Name"].BackgroundTransparency = 1
		GUI["_Name"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Name"].BorderSizePixel = 0
		GUI["_Name"].Position = UDim2.new(0, 0, 0, 1)
		GUI["_Name"].Size = UDim2.new(0.5, 0, 1, -2)
		GUI["_Name"].Name = Library:RandomName()
		GUI["_Name"].Parent = GUI["_HeadBar"]
		GUI["_Name"].Size = UDim2.new(0, GUI["_Name"].TextBounds.X + GUI["_UIPadding"].PaddingLeft.Offset, 1, 0)

		GUI["_Dragger"].Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
		GUI["_Dragger"].ImageTransparency = 1
		GUI["_Dragger"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		GUI["_Dragger"].BackgroundTransparency = 1
		GUI["_Dragger"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Dragger"].BorderSizePixel = 0
		GUI["_Dragger"].Size = UDim2.new(1, -60, 1, 0)
		GUI["_Dragger"].Name = Library:RandomName()
		GUI["_Dragger"].Parent = GUI["_HeadBar"]

		GUI["_UICorner4"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner4"].Name = Library:RandomName()
		GUI["_UICorner4"].Parent = GUI["_Dragger"]

		GUI["_ContentContainer"].AnchorPoint = Vector2.new(1, 0)
		GUI["_ContentContainer"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
		GUI["_ContentContainer"].BackgroundTransparency = 1
		GUI["_ContentContainer"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_ContentContainer"].BorderSizePixel = 0
		GUI["_ContentContainer"].ClipsDescendants = true
		GUI["_ContentContainer"].Position = UDim2.new(1, -6, 0, 36)
		GUI["_ContentContainer"].Size = UDim2.new(0.647, 0, 1, -42)
		GUI["_ContentContainer"].Name = Library:RandomName()
		GUI["_ContentContainer"].Parent = GUI["_Main"]
	end

	--Navigation Frame
	do
		GUI["_Navigation"] = Instance.new("Frame");
		GUI["_UICorner2"] = Instance.new("UICorner");
		GUI["_Hide1"] = Instance.new("Frame");
		GUI["_Hide2"] = Instance.new("Frame");
		GUI["_ButtonHolder"] = Instance.new("ScrollingFrame");
		GUI["_UIListLayout"] = Instance.new("UIListLayout");
		GUI["_UIPadding1"] = Instance.new("UIPadding");

		GUI["_Navigation"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_Navigation"].BackgroundTransparency = 0.5
		GUI["_Navigation"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Navigation"].BorderSizePixel = 0
		GUI["_Navigation"].Position = UDim2.new(0, 0, 0, 30)
		GUI["_Navigation"].Size = UDim2.new(0.333, 0, 1, -30)
		GUI["_Navigation"].Name = Library:RandomName()
		GUI["_Navigation"].Parent = GUI["_Main"]

		GUI["_UICorner2"].Name = Library:RandomName()
		GUI["_UICorner2"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner2"].Parent = GUI["_Navigation"]

		GUI["_Hide1"].AnchorPoint = Vector2.new(1, 0)
		GUI["_Hide1"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_Hide1"].BackgroundTransparency = 0.5
		GUI["_Hide1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Hide1"].BorderSizePixel = 0
		GUI["_Hide1"].Position = UDim2.new(1, 0, 0, 0)
		GUI["_Hide1"].Size = UDim2.new(0, 3, 1, 0)
		GUI["_Hide1"].Name = Library:RandomName()
		GUI["_Hide1"].Parent = GUI["_Navigation"]

		GUI["_Hide2"].AnchorPoint = Vector2.new(0, 1)
		GUI["_Hide2"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_Hide2"].BackgroundTransparency = 0.5
		GUI["_Hide2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Hide2"].BorderSizePixel = 0
		GUI["_Hide2"].Position = UDim2.new(0, 0, 0, 3)
		GUI["_Hide2"].Size = UDim2.new(1, 0, 0, 4)
		GUI["_Hide2"].Name = Library:RandomName()
		GUI["_Hide2"].Parent = GUI["_Navigation"]

		GUI["_ButtonHolder"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_ButtonHolder"].BackgroundTransparency = 0.5
		GUI["_ButtonHolder"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_ButtonHolder"].BorderSizePixel = 0
		GUI["_ButtonHolder"].ScrollBarThickness = 0
		GUI["_ButtonHolder"].CanvasSize = UDim2.new(0, 0, 0, 0)
		GUI["_ButtonHolder"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_ButtonHolder"].Name = Library:RandomName()
		GUI["_ButtonHolder"].Parent = GUI["_Navigation"]

		GUI["_UIListLayout"].Name = Library:RandomName()
		GUI["_UIListLayout"].Padding = UDim.new(0, 1)
		GUI["_UIListLayout"].SortOrder = Enum.SortOrder.LayoutOrder
		GUI["_UIListLayout"].Parent = GUI["_ButtonHolder"]

		GUI["_UIPadding1"].Name = Library:RandomName()
		GUI["_UIPadding1"].PaddingBottom = UDim.new(0, 8)
		GUI["_UIPadding1"].PaddingTop = UDim.new(0, 8)
		GUI["_UIPadding1"].PaddingLeft = UDim.new(0, 6)
		GUI["_UIPadding1"].PaddingRight = UDim.new(0, 3)
		GUI["_UIPadding1"].Parent = GUI["_ButtonHolder"]
	end

	--Logic
	do
		local dragToggle
		local dragStart
		local startPos

		local closeB = {
			Hover = false,
			MouseDown = false
		}

		local minimizeB = {
			Hover = false,
			MouseDown = false,
			state = true
		}

		--Drag Logic
		local function updateInput(input)
			local delta = input.Position - dragStart
			local position = UDim2.new(startPos.X.Scale, math.clamp(startPos.X.Offset + delta.X, 0, viewport.X - GUI["_Main"].AbsoluteSize.X), startPos.Y.Scale, math.clamp(startPos.Y.Offset + delta.Y, 0, viewport.Y - GUI["_Main"].AbsoluteSize.Y))
			GUI["_Main"].Position = position
		end

		local Connection


		GUI["_Dragger"].MouseButton1Down:Connect(function()
			if (not closeB.MouseDown and not closeB.Hover) and (not minimizeB.MouseDown and not minimizeB.Hover) then
				dragToggle = true
				dragStart = Vector3.new(mouse.X, mouse.Y, 0)
				startPos = GUI["_Main"].Position

				Connection = uis.InputEnded:Connect(function(input, gpe)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and dragToggle then
						dragToggle = false
						if Connection then Connection:Disconnect() Connection = nil end
					end
				end)
			end
		end)
		
		uis.TouchMoved:Connect(function(input)
			if dragToggle then
				updateInput(input)
			end
		end)

		uis.InputChanged:Connect(function(input)
			if dragToggle then
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					updateInput(input)
				end
			end
		end)


		--Close Logic
		GUI["_Button"].MouseButton1Click:Connect(function()
			for i, v in pairs(GUI) do
				if typeof(v) == "Instance" then
					v:Destroy()
					GUI[i] = nil
				else
					GUI[i] = nil
				end
			end
		end)

		GUI["_Close"].MouseEnter:Connect(function()
			closeB.Hover = true

			if not closeB.MouseDown then
				Library:tween(GUI["_Close"], {BackgroundTransparency = 0.5})
			end
		end)

		GUI["_Close"].MouseLeave:Connect(function()
			closeB.Hover = false

			if not closeB.MouseDown then
				Library:tween(GUI["_Close"], {BackgroundTransparency = 1})
			end
		end)

		local Connection

		GUI["_Button"].MouseButton1Down:Connect(function()
			closeB.MouseDown = true
			Library:tween(GUI["_Close"], {BackgroundTransparency = 0})

			Connection = uis.InputEnded:Connect(function(input, gpe)
				if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and closeB.MouseDown then
					closeB.MouseDown = false
					if GUI["_Close"] then
						if closeB.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
							Library:tween(GUI["_Close"], {BackgroundTransparency = 0.5})
						else
							Library:tween(GUI["_Close"], {BackgroundTransparency = 1})
						end
					end
					if Connection then Connection:Disconnect() Connection = nil end
				end
			end)
		end)

		--Minimize Logic
		GUI["_Button1"].MouseButton1Click:Connect(function()
			if minimizeB.state then
				Library:tween(GUI["_Main"], {Size = UDim2.new(0, GUI["_Name"].AbsoluteSize.X + (GUI["_Minimize"].AbsoluteSize.X + GUI["_Close"].AbsoluteSize.X + 30), 0, GUI["_Name"].AbsoluteSize.Y)})
				GUI["_Minimize"].Image = "rbxassetid://18820269724"
				GUI["_DropShadow"].Size = UDim2.new(1, 31, 1, 31)
				GUI["_ContentContainer"].Visible = false
				GUI["_Navigation"].Visible = false
				GUI["_Hide"].Visible = false
			else
				Library:tween(GUI["_Main"], {Size = UDim2.new(0.571, 0, 0.81, 0)})
				GUI["_Minimize"].Image = "rbxassetid://18756204039"
				GUI["_DropShadow"].Size = UDim2.new(1, 47, 1, 47)
				GUI["_ContentContainer"].Visible = true
				GUI["_Navigation"].Visible = true
				GUI["_Hide"].Visible = true
			end
			Library:tween(GUI["_Minimize"], {BackgroundTransparency = 1})
			minimizeB.state = not minimizeB.state
		end)

		GUI["_Minimize"].MouseEnter:Connect(function()
			minimizeB.Hover = true

			if not minimizeB.MouseDown then
				Library:tween(GUI["_Minimize"], {BackgroundTransparency = 0.5})
			end
		end)

		GUI["_Minimize"].MouseLeave:Connect(function()
			minimizeB.Hover = false

			if not minimizeB.MouseDown then
				Library:tween(GUI["_Minimize"], {BackgroundTransparency = 1})
			end
		end)

		local Connection

		GUI["_Button1"].MouseButton1Down:Connect(function()
			minimizeB.MouseDown = true
			Library:tween(GUI["_Minimize"], {BackgroundTransparency = 0})

			Connection = uis.InputEnded:Connect(function(input, gpe)
				if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and minimizeB.MouseDown then
					minimizeB.MouseDown = false

					if minimizeB.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
						Library:tween(GUI["_Minimize"], {BackgroundTransparency = 0.5})
					else
						Library:tween(GUI["_Minimize"], {BackgroundTransparency = 1})
					end
					if Connection then Connection:Disconnect() Connection = nil end
				end
			end)
		end)
	end

	function GUI:CreateTab(options)
		options = Library:Validate(
			{
				Name = "Tab",
				Icon = "rbxassetid://18756559825"
			}, options or {})

		local TAB = {
			Hover = false,
			Active = false,
			MouseDown = false
		}

		--Render
		do
			TAB["_Inactive"] = Instance.new("TextLabel");
			TAB["_UICorner"] = Instance.new("UICorner");
			TAB["_Button"] = Instance.new("ImageButton");
			TAB["_UIPadding3"] = Instance.new("UIPadding");
			TAB["_Icon1"] = Instance.new("ImageLabel");
			TAB["_HomeTab"] = Instance.new("ScrollingFrame");
			TAB["_UIPadding4"] = Instance.new("UIPadding");
			TAB["_UIListLayout1"] = Instance.new("UIListLayout");


			TAB["_Inactive"].Font = Enum.Font.Ubuntu
			TAB["_Inactive"].Text = options.Name
			TAB["_Inactive"].TextColor3 = Color3.fromRGB(200, 200, 200)
			TAB["_Inactive"].TextSize = 20
			TAB["_Inactive"].TextXAlignment = Enum.TextXAlignment.Left
			TAB["_Inactive"].BackgroundColor3 = Color3.fromRGB(86.00000247359276, 86.00000247359276, 86.00000247359276)
			TAB["_Inactive"].BackgroundTransparency = 1
			TAB["_Inactive"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			TAB["_Inactive"].BorderSizePixel = 0
			TAB["_Inactive"].Size = UDim2.new(1, -3, 0, 30)
			TAB["_Inactive"].Name = Library:RandomName()
			TAB["_Inactive"].Parent = GUI["_ButtonHolder"]
			
			TAB["_UICorner"].CornerRadius = UDim.new(0, 4)
			TAB["_UICorner"].Name = Library:RandomName()
			TAB["_UICorner"].Parent = TAB["_Inactive"]

			TAB["_UIPadding3"].Name = Library:RandomName()
			TAB["_UIPadding3"].PaddingLeft = UDim.new(0, 35)
			TAB["_UIPadding3"].Parent = TAB["_Inactive"]

			TAB["_Icon1"].Image = options.Icon
			TAB["_Icon1"].BackgroundColor3 = Color3.fromRGB(153.00000607967377, 153.00000607967377, 153.00000607967377)
			TAB["_Icon1"].BackgroundTransparency = 1
			TAB["_Icon1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			TAB["_Icon1"].BorderSizePixel = 0
			TAB["_Icon1"].Position = UDim2.new(0, -30, 0, 5)
			TAB["_Icon1"].Size = UDim2.new(0, 20, 0, 20)
			TAB["_Icon1"].Name = Library:RandomName()
			TAB["_Icon1"].ImageColor3 = Color3.fromRGB(200, 200, 200)
			TAB["_Icon1"].Parent = TAB["_Inactive"]

			TAB["_Button"].ImageTransparency = 1
			TAB["_Button"].BackgroundTransparency = 1
			TAB["_Button"].Position = UDim2.new(0, -35, 0, 0)
			TAB["_Button"].Size = UDim2.new(1, 35, 1, 0)
			TAB["_Button"].Name = Library:RandomName()
			TAB["_Button"].Parent = TAB["_Inactive"]

			TAB["_HomeTab"].ScrollBarImageTransparency = 1
			TAB["_HomeTab"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
			TAB["_HomeTab"].BackgroundTransparency = 1
			TAB["_HomeTab"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			TAB["_HomeTab"].BorderSizePixel = 0
			TAB["_HomeTab"].ClipsDescendants = false
			TAB["_HomeTab"].Selectable = false
			TAB["_HomeTab"].Size = UDim2.new(1, 0, 1, 0)
			TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, 1)
			TAB["_HomeTab"].ScrollBarThickness = 0
			TAB["_HomeTab"].Name = Library:RandomName()
			TAB["_HomeTab"].Visible = false
			TAB["_HomeTab"].Parent = GUI["_ContentContainer"]

			TAB["_UIPadding4"].Name = Library:RandomName()
			TAB["_UIPadding4"].PaddingBottom = UDim.new(0, 1)
			TAB["_UIPadding4"].PaddingLeft = UDim.new(0, 1)
			TAB["_UIPadding4"].PaddingRight = UDim.new(0, 1)
			TAB["_UIPadding4"].PaddingTop = UDim.new(0, 1)
			TAB["_UIPadding4"].Parent = TAB["_HomeTab"]

			TAB["_UIListLayout1"].Name = Library:RandomName()
			TAB["_UIListLayout1"].Padding = UDim.new(0, 6)
			TAB["_UIListLayout1"].SortOrder = Enum.SortOrder.LayoutOrder
			TAB["_UIListLayout1"].Parent = TAB["_HomeTab"]
		end

		--Methodes
		function TAB:Activate()
			if not TAB.Active then
				if GUI.CurrentTab then
					GUI.CurrentTab:Deactivate()
				end

				TAB.Active = true
				Library:tween(TAB["_Inactive"], {BackgroundTransparency = .8})
				Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
				Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
				TAB["_HomeTab"].Visible = true

				GUI.CurrentTab = TAB
			end
		end

		function TAB:Deactivate()
			if TAB.Active then
				TAB.Active = false
				TAB.Hover = false
				Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
				Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
				Library:tween(TAB["_Inactive"], {BackgroundTransparency = 1})
				TAB["_HomeTab"].Visible = false
			end
		end

		function TAB:ResizeNavigation()
			local count = 0
			for i, v in pairs(GUI["_ButtonHolder"]:GetChildren()) do
				if v:IsA("TextLabel") then
					count += 1
				end
			end

			GUI["_ButtonHolder"].CanvasSize = UDim2.new(0, 0, 0, (32 * count))
		end

		TAB:ResizeNavigation()

		function TAB.ResizeContents(content)
			if content:IsA("Frame") then
				TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset + content.AbsoluteSize.Y) + 6)
			end
		end

		TAB["_HomeTab"].ChildAdded:Connect(TAB.ResizeContents)

		--Logic
		do
			TAB["_Button"].MouseButton1Click:Connect(function()
				TAB:Activate()
			end)

			TAB["_Inactive"].MouseEnter:Connect(function()
				if not TAB.Active then
					TAB.Hover = true

					if not TAB.Active then
						Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
						Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
					end
				end
			end)

			TAB["_Inactive"].MouseLeave:Connect(function()
				if not TAB.Active then
					TAB.Hover = false

					Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
					Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
				end
			end)

			local Connection

			TAB["_Button"].MouseButton1Down:Connect(function()
				TAB.MouseDown = true

				Connection = uis.InputEnded:Connect(function(input, gpe)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and TAB.MouseDown then
						TAB.MouseDown = false
						if Connection then Connection:Disconnect() Connection = nil end
					end
				end)
			end)

			if not GUI.CurrentTab then
				TAB:Activate()
			end
		end

		function TAB:CreateButton(options)
			options = Library:Validate(
				{
					Name = "Button",
					callback = function() end
				}, options or {})

			local BUTTON  = {
				Hover = false,
				MouseDown = false
			}

			--Render
			do
				BUTTON["_Button1"] = Instance.new("Frame");
				BUTTON["_UICorner3"] = Instance.new("UICorner");
				BUTTON["_UIStroke"] = Instance.new("UIStroke");
				BUTTON["_Title"] = Instance.new("TextLabel");
				BUTTON["_Button"] = Instance.new("ImageButton");
				BUTTON["_UICorner4"] = Instance.new("UICorner");
				BUTTON["_UIPadding5"] = Instance.new("UIPadding");
				BUTTON["_UIPadding6"] = Instance.new("UIPadding");
				BUTTON["_Icon2"] = Instance.new("ImageLabel");

				BUTTON["_Button1"].BackgroundColor3 = Color3.fromRGB(10, 10, 10)
				BUTTON["_Button1"].BackgroundTransparency = 0.1
				BUTTON["_Button1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				BUTTON["_Button1"].BorderSizePixel = 0
				BUTTON["_Button1"].Size = UDim2.new(1, 0, 0, 35)
				BUTTON["_Button1"].Name = Library:RandomName()
				BUTTON["_Button1"].Parent = TAB["_HomeTab"]

				BUTTON["_UICorner3"].Name = Library:RandomName()
				BUTTON["_UICorner3"].CornerRadius = UDim.new(0, 4)
				BUTTON["_UICorner3"].Parent = BUTTON["_Button1"]

				BUTTON["_UIStroke"].Name = Library:RandomName()
				BUTTON["_UIStroke"].Color = Color3.fromRGB(80, 80, 80)
				BUTTON["_UIStroke"].Parent = BUTTON["_Button1"]

				BUTTON["_Title"].Font = Enum.Font.Ubuntu
				BUTTON["_Title"].Text = options.Name
				BUTTON["_Title"].TextColor3 = Color3.fromRGB(255, 255, 255)
				BUTTON["_Title"].TextSize = 20
				BUTTON["_Title"].TextXAlignment = Enum.TextXAlignment.Left
				BUTTON["_Title"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				BUTTON["_Title"].BackgroundTransparency = 1
				BUTTON["_Title"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				BUTTON["_Title"].BorderSizePixel = 0
				BUTTON["_Title"].Position = UDim2.new(0, 0, 0, 0)
				BUTTON["_Title"].Size = UDim2.new(1, -32, 1, 0)
				BUTTON["_Title"].Name = Library:RandomName()
				BUTTON["_Title"].Parent = BUTTON["_Button1"]

				BUTTON["_UICorner4"].Name = Library:RandomName()
				BUTTON["_UICorner4"].CornerRadius = UDim.new(0, 4)
				BUTTON["_UICorner4"].Parent = BUTTON["_Button"]

				BUTTON["_UIPadding5"].Name = Library:RandomName()
				BUTTON["_UIPadding5"].PaddingLeft = UDim.new(0, 10)
				BUTTON["_UIPadding5"].Parent = BUTTON["_Title"]

				BUTTON["_Icon2"].Image = "rbxassetid://18757080627"
				BUTTON["_Icon2"].AnchorPoint = Vector2.new(1, 0)
				BUTTON["_Icon2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				BUTTON["_Icon2"].BackgroundTransparency = 1
				BUTTON["_Icon2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				BUTTON["_Icon2"].BorderSizePixel = 0
				BUTTON["_Icon2"].Position = UDim2.new(1, -6, 0.25, -2)
				BUTTON["_Icon2"].Size = UDim2.new(0, 20, 0, 20)
				BUTTON["_Icon2"].Name = Library:RandomName()
				BUTTON["_Icon2"].Parent = BUTTON["_Button1"]

				BUTTON["_Button"].ImageTransparency = 1
				BUTTON["_Button"].BackgroundTransparency = 1
				BUTTON["_Button"].Position = UDim2.new(0, 0, 0, 0)
				BUTTON["_Button"].Size = UDim2.new(1, 0, 1, 0)
				BUTTON["_Button"].Name = Library:RandomName()
				BUTTON["_Button"].Parent = BUTTON["_Button1"]
			end


			--Logic
			do
				BUTTON["_Button"].MouseButton1Click:Connect(function()
					options.callback()
				end)

				BUTTON["_Button1"].MouseEnter:Connect(function()
					BUTTON.Hover = true

					if not BUTTON.MouseDown then
						Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(150, 150, 150)})
					end
				end)

				BUTTON["_Button1"].MouseLeave:Connect(function()
					BUTTON.Hover = false

					if not BUTTON.MouseDown then
						Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(80, 80, 80)})
					end
				end)

				local Connection

				BUTTON["_Button"].MouseButton1Down:Connect(function()
					BUTTON.MouseDown = true
					Library:tween(BUTTON["_Button1"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(200, 200, 200)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and BUTTON.MouseDown then
							BUTTON.MouseDown = false

							if BUTTON.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(BUTTON["_Button1"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(150, 150, 150)})
							else
								Library:tween(BUTTON["_Button1"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(80, 80, 80)})
							end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return BUTTON
		end

		function TAB:CreateLabel(options)
			options = Library:Validate(
				{
					Message = "Label"
				}, options or {})

			local LABEL = {}

			--Render
			do
				LABEL["_Label"] = Instance.new("Frame");
				LABEL["_UICorner4"] = Instance.new("UICorner");
				LABEL["_UIStroke1"] = Instance.new("UIStroke");
				LABEL["_Title1"] = Instance.new("TextLabel");
				LABEL["_UIPadding7"] = Instance.new("UIPadding");
				LABEL["_UICorner8"] = Instance.new("UICorner");
				LABEL["_UIPadding8"] = Instance.new("UIPadding");

				LABEL["_Label"].BackgroundColor3 = Color3.fromRGB(61.00000396370888, 61.00000396370888, 61.00000396370888)
				LABEL["_Label"].BackgroundTransparency = 0.1
				LABEL["_Label"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				LABEL["_Label"].BorderSizePixel = 0
				LABEL["_Label"].Size = UDim2.new(1, 0, 0, 32)
				LABEL["_Label"].Name = Library:RandomName()
				LABEL["_Label"].Parent = TAB["_HomeTab"]

				LABEL["_UICorner4"].Name = Library:RandomName()
				LABEL["_UICorner4"].CornerRadius = UDim.new(0, 4)
				LABEL["_UICorner4"].Parent = LABEL["_Label"]

				LABEL["_UIStroke1"].Name = Library:RandomName()
				LABEL["_UIStroke1"].Color = Color3.fromRGB(161.0000056028366, 161.0000056028366, 161.0000056028366)
				LABEL["_UIStroke1"].Parent = LABEL["_Label"]

				LABEL["_Title1"].Font = Enum.Font.Ubuntu
				LABEL["_Title1"].TextColor3 = Color3.fromRGB(255, 255, 255)
				LABEL["_Title1"].Text = options.Message
				LABEL["_Title1"].TextSize = 20
				LABEL["_Title1"].TextXAlignment = Enum.TextXAlignment.Left
				LABEL["_Title1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				LABEL["_Title1"].BackgroundTransparency = 1
				LABEL["_Title1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				LABEL["_Title1"].BorderSizePixel = 0
				LABEL["_Title1"].Position = UDim2.new(0, 0, 0, 0)
				LABEL["_Title1"].Size = UDim2.new(1, 0, 1, 0)
				LABEL["_Title1"].Name = Library:RandomName()
				LABEL["_Title1"].TextWrapped = true
				LABEL["_Title1"].TextYAlignment = Enum.TextYAlignment.Top
				LABEL["_Title1"].Parent = LABEL["_Label"]

				LABEL["_UIPadding7"].Name = Library:RandomName()
				LABEL["_UIPadding7"].PaddingLeft = UDim.new(0, 5)
				LABEL["_UIPadding7"].PaddingRight = UDim.new(0, 5)
				LABEL["_UIPadding7"].PaddingTop = UDim.new(0, 0)
				LABEL["_UIPadding7"].Parent = LABEL["_Title1"]

				LABEL["_UICorner8"].CornerRadius = UDim.new(0, 4)
				LABEL["_UICorner8"].Name = Library:RandomName()
				LABEL["_UICorner8"].Parent = LABEL["_Title1"]

				LABEL["_UIPadding8"].Name = Library:RandomName()
				LABEL["_UIPadding8"].PaddingBottom = UDim.new(0, 6)
				LABEL["_UIPadding8"].PaddingLeft = UDim.new(0, 6)
				LABEL["_UIPadding8"].PaddingRight = UDim.new(0, 6)
				LABEL["_UIPadding8"].PaddingTop = UDim.new(0, 6)
				LABEL["_UIPadding8"].Parent = LABEL["_Label"]
			end

			--Methods
			function LABEL:SetText(text)
				options.Message = text
				LABEL:_update()
			end

			function LABEL:_update()
				LABEL["_Title1"].Text = options.Message
				--[[
				LABEL["_Title1"].Size = UDim2.new(LABEL["_Title1"].Size.X.Scale, LABEL["_Title1"].Size.X.Offset, 0, math.huge)
				LABEL["_Title1"].Size = UDim2.new(LABEL["_Title1"].Size.X.Scale, LABEL["_Title1"].Size.X.Offset, 0, LABEL["_Title1"].TextBounds.Y)
				LABEL["_Label"].Size = UDim2.new(LABEL["_Label"].Size.X.Scale, LABEL["_Label"].Size.X.Offset, 0, LABEL["_Title1"].TextBounds.Y + 12)
				]]
			end

			if options.Message then
				LABEL:SetText(options.Message)
			end

			return LABEL
		end

		function TAB:CreateSlider(options)
			options = Library:Validate(
				{
					Name = "Slider",
					min = 0,
					max = 100,
					default = 50,
					callback = function() end
				}, options or {})

			local SLIDER = {
				Hover = false,
				MouseDown = false,
				Connection = nil
			}

			--Render
			do
				SLIDER["_Slider"] = Instance.new("Frame");
				SLIDER["_Button"] = Instance.new("ImageButton");
				SLIDER["_UICorner8"] = Instance.new("UICorner");
				SLIDER["_UICorner5"] = Instance.new("UICorner");
				SLIDER["_UIStroke2"] = Instance.new("UIStroke");
				SLIDER["_Title2"] = Instance.new("TextLabel");
				SLIDER["_UIPadding9"] = Instance.new("UIPadding");
				SLIDER["_UIPadding10"] = Instance.new("UIPadding");
				SLIDER["_Value"] = Instance.new("TextLabel");
				SLIDER["_SliderBack"] = Instance.new("Frame");
				SLIDER["_UICorner6"] = Instance.new("UICorner");
				SLIDER["_UIStroke3"] = Instance.new("UIStroke");
				SLIDER["_Draggable"] = Instance.new("Frame");
				SLIDER["_UICorner7"] = Instance.new("UICorner");

				SLIDER["_Slider"].BackgroundColor3 = Color3.fromRGB(10, 10, 10)
				SLIDER["_Slider"].BackgroundTransparency = 0.1
				SLIDER["_Slider"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Slider"].BorderSizePixel = 0
				SLIDER["_Slider"].Size = UDim2.new(1, 0, 0, 45)
				SLIDER["_Slider"].Name = Library:RandomName()
				SLIDER["_Slider"].Parent = TAB["_HomeTab"]

				SLIDER["_UICorner8"].Name = Library:RandomName()
				SLIDER["_UICorner8"].CornerRadius = UDim.new(0, 4)
				SLIDER["_UICorner8"].Parent = SLIDER["_Button"]

				SLIDER["_UICorner5"].Name = Library:RandomName()
				SLIDER["_UICorner5"].CornerRadius = UDim.new(0, 4)
				SLIDER["_UICorner5"].Parent = SLIDER["_Slider"]

				SLIDER["_UIStroke2"].Name = Library:RandomName()
				SLIDER["_UIStroke2"].Color = Color3.fromRGB(80, 80, 80)
				SLIDER["_UIStroke2"].Parent = SLIDER["_Slider"]

				SLIDER["_Title2"].Font = Enum.Font.Ubuntu
				SLIDER["_Title2"].Text = options.Name
				SLIDER["_Title2"].TextColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Title2"].TextSize = 20
				SLIDER["_Title2"].TextXAlignment = Enum.TextXAlignment.Left
				SLIDER["_Title2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Title2"].BackgroundTransparency = 1
				SLIDER["_Title2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Title2"].BorderSizePixel = 0
				SLIDER["_Title2"].Position = UDim2.new(0, 0, 0, 0)
				SLIDER["_Title2"].Size = UDim2.new(1, -40, 1, 0)
				SLIDER["_Title2"].Name = Library:RandomName()
				SLIDER["_Title2"].Parent = SLIDER["_Slider"]

				SLIDER["_UIPadding9"].Name = Library:RandomName()
				SLIDER["_UIPadding9"].PaddingLeft = UDim.new(0, 10)
				SLIDER["_UIPadding9"].PaddingTop = UDim.new(0, -10)
				SLIDER["_UIPadding9"].Parent = SLIDER["_Title2"]

				SLIDER["_Value"].Font = Enum.Font.Ubuntu
				SLIDER["_Value"].Text = "100"
				SLIDER["_Value"].TextColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Value"].TextSize = 20
				SLIDER["_Value"].AnchorPoint = Vector2.new(1, 0)
				SLIDER["_Value"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Value"].BackgroundTransparency = 1
				SLIDER["_Value"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Value"].BorderSizePixel = 0
				SLIDER["_Value"].Position = UDim2.new(1, -12, 0.25, -3)
				SLIDER["_Value"].Size = UDim2.new(0, 20, 0, 20)
				SLIDER["_Value"].Name = Library:RandomName()
				SLIDER["_Value"].Parent = SLIDER["_Slider"]

				SLIDER["_SliderBack"].AnchorPoint = Vector2.new(0, 1)
				SLIDER["_SliderBack"].BackgroundColor3 = Color3.fromRGB(27.000002190470695, 27.000002190470695, 27.000002190470695)
				SLIDER["_SliderBack"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_SliderBack"].BorderSizePixel = 0
				SLIDER["_SliderBack"].Position = UDim2.new(0, 6, 1, -5)
				SLIDER["_SliderBack"].Size = UDim2.new(1, -12, 0, 5)
				SLIDER["_SliderBack"].Name = Library:RandomName()
				SLIDER["_SliderBack"].Parent = SLIDER["_Slider"]

				SLIDER["_UICorner6"].Name = Library:RandomName()
				SLIDER["_UICorner6"].Parent = SLIDER["_SliderBack"]

				SLIDER["_UIStroke3"].Name = Library:RandomName()
				SLIDER["_UIStroke3"].Color = Color3.fromRGB(56, 56, 56)
				SLIDER["_UIStroke3"].Parent = SLIDER["_SliderBack"]

				SLIDER["_Draggable"].BackgroundColor3 = Color3.fromRGB(84, 84, 84)
				SLIDER["_Draggable"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Draggable"].BorderSizePixel = 0
				SLIDER["_Draggable"].Size = UDim2.new(0.5, 0, 1, 0)
				SLIDER["_Draggable"].Name = Library:RandomName()
				SLIDER["_Draggable"].Parent = SLIDER["_SliderBack"]

				SLIDER["_UICorner7"].Name = Library:RandomName()
				SLIDER["_UICorner7"].Parent = SLIDER["_Draggable"]

				SLIDER["_Button"].ImageTransparency = 1
				SLIDER["_Button"].BackgroundTransparency = 1
				SLIDER["_Button"].Position = UDim2.new(0, 0, 0, 0)
				SLIDER["_Button"].Size = UDim2.new(1, 0, 1, 0)
				SLIDER["_Button"].Name = Library:RandomName()
				SLIDER["_Button"].Parent = SLIDER["_Slider"]
			end

			--Methods
			function SLIDER:SetValue(v)
				if v == nil then
					local precentage = math.clamp((mouse.X - SLIDER["_SliderBack"].AbsolutePosition.X) / (SLIDER["_SliderBack"].AbsoluteSize.X), 0, 1)
					local value = math.floor(((options.max - options.min) * precentage) + options.min)

					SLIDER["_Value"].Text = value
					SLIDER["_Draggable"].Size = UDim2.fromScale(precentage, 1)
				else
					SLIDER["_Value"].Text = v
					SLIDER["_Draggable"].Size = UDim2.fromScale(((v - options.min) / (options.max - options.min)), 1)
				end
				options.callback(tonumber(SLIDER["_Value"].Text))
			end

			function SLIDER:GetValue()
				return tonumber(SLIDER["_Value"].Text)
			end

			SLIDER:SetValue(options.default)


			--Logic
			do
				SLIDER["_Button"].MouseButton1Down:Connect(function()
					if not SLIDER.Connection then
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					else
						SLIDER.Connection:Disconnect()
						SLIDER.Connection = nil
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					end
				end)

				SLIDER["_Slider"].MouseEnter:Connect(function()
					SLIDER.Hover = true

					if not SLIDER.MouseDown then
						Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(150, 150, 150)})
						Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(100, 100, 100)})
					end
				end)

				SLIDER["_Slider"].MouseLeave:Connect(function()
					SLIDER.Hover = false

					if not SLIDER.MouseDown then
						Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(80, 80, 80)})
						Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(56, 56, 56)})
					end
				end)

				local Connection

				SLIDER["_Button"].MouseButton1Down:Connect(function()
					SLIDER.MouseDown = true
					Library:tween(SLIDER["_Slider"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(200, 200, 200)})
					Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(200, 200, 200)})
					Library:tween(SLIDER["_Draggable"], {BackgroundColor3 = Color3.fromRGB(200, 200, 200)})

					if not SLIDER.Connection then
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					else
						SLIDER.Connection:Disconnect()
						SLIDER.Connection = nil
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					end

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and SLIDER.MouseDown then
							SLIDER.MouseDown = false

							if SLIDER.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(SLIDER["_Slider"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(150, 150, 150)})
								Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(100, 100, 100)})
								Library:tween(SLIDER["_Draggable"], {BackgroundColor3 = Color3.fromRGB(84, 84, 84)})
							else
								Library:tween(SLIDER["_Slider"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(80, 80, 80)})
								Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(56, 56, 56)})
								Library:tween(SLIDER["_Draggable"], {BackgroundColor3 = Color3.fromRGB(84, 84, 84)})
							end

							options.callback(SLIDER["_Value"].Text)
							if SLIDER.Connection then SLIDER.Connection:Disconnect() SLIDER.Connection = nil end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return SLIDER
		end

		function TAB:CreateToggle(options)
			options = Library:Validate(
				{
					Name = "Toggle",
					default = false,
					callback = function(v) print(v) end
				}, options or {})

			local TOGGLE = {
				Hover = false,
				MouseDown = false,
				state = false
			}

			--Render
			do
				TOGGLE["_ToggleInactive"] = Instance.new("Frame");
				TOGGLE["_Button"] = Instance.new("ImageButton")
				TOGGLE["_UICorner14"] = Instance.new("UICorner");
				TOGGLE["_UIStroke9"] = Instance.new("UIStroke");
				TOGGLE["_Title5"] = Instance.new("TextLabel");
				TOGGLE["_UIPadding15"] = Instance.new("UIPadding");
				TOGGLE["_UIPadding16"] = Instance.new("UIPadding");
				TOGGLE["_CheckmarkHolder1"] = Instance.new("Frame");
				TOGGLE["_UICorner15"] = Instance.new("UICorner");
				TOGGLE["_Checkmark1"] = Instance.new("ImageLabel");

				TOGGLE["_ToggleInactive"].BackgroundColor3 = Color3.fromRGB(10, 10, 10)
				TOGGLE["_ToggleInactive"].BackgroundTransparency = 0.1
				TOGGLE["_ToggleInactive"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_ToggleInactive"].BorderSizePixel = 0
				TOGGLE["_ToggleInactive"].Size = UDim2.new(1, 0, 0, 35)
				TOGGLE["_ToggleInactive"].Name = Library:RandomName()
				TOGGLE["_ToggleInactive"].Parent = TAB["_HomeTab"]

				TOGGLE["_UICorner14"].Name = Library:RandomName()
				TOGGLE["_UICorner14"].CornerRadius = UDim.new(0, 4)
				TOGGLE["_UICorner14"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_UIStroke9"].Name = Library:RandomName()
				TOGGLE["_UIStroke9"].Color = Color3.fromRGB(80, 80, 80)
				TOGGLE["_UIStroke9"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_Title5"].Font = Enum.Font.Ubuntu
				TOGGLE["_Title5"].Text = options.Name
				TOGGLE["_Title5"].TextColor3 = Color3.fromRGB(255, 255, 255)
				TOGGLE["_Title5"].TextSize = 20
				TOGGLE["_Title5"].TextXAlignment = Enum.TextXAlignment.Left
				TOGGLE["_Title5"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TOGGLE["_Title5"].BackgroundTransparency = 1
				TOGGLE["_Title5"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_Title5"].BorderSizePixel = 0
				TOGGLE["_Title5"].Position = UDim2.new(0, 0, 0, 0)
				TOGGLE["_Title5"].Size = UDim2.new(1, -32, 1, 0)
				TOGGLE["_Title5"].Name = Library:RandomName()
				TOGGLE["_Title5"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_UIPadding15"].Name = Library:RandomName()
				TOGGLE["_UIPadding15"].PaddingLeft = UDim.new(0, 10)
				TOGGLE["_UIPadding15"].Parent = TOGGLE["_Title5"]

				TOGGLE["_CheckmarkHolder1"].AnchorPoint = Vector2.new(1, 0)
				TOGGLE["_CheckmarkHolder1"].BackgroundColor3 = Color3.fromRGB(98, 98, 98)
				TOGGLE["_CheckmarkHolder1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_CheckmarkHolder1"].BorderSizePixel = 0
				TOGGLE["_CheckmarkHolder1"].Position = UDim2.new(1, -6, 0.25, -2)
				TOGGLE["_CheckmarkHolder1"].Size = UDim2.new(0, 20, 0, 20)
				TOGGLE["_CheckmarkHolder1"].Name = Library:RandomName()
				TOGGLE["_CheckmarkHolder1"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_UICorner15"].Name = Library:RandomName()
				TOGGLE["_UICorner15"].CornerRadius = UDim.new(0, 4)
				TOGGLE["_UICorner15"].Parent = TOGGLE["_CheckmarkHolder1"]

				TOGGLE["_Checkmark1"].Image = "rbxassetid://18757850793"
				TOGGLE["_Checkmark1"].AnchorPoint = Vector2.new(0.5, 0.5)
				TOGGLE["_Checkmark1"].BackgroundColor3 = Color3.fromRGB(88, 88, 88)
				TOGGLE["_Checkmark1"].BackgroundTransparency = 1
				TOGGLE["_Checkmark1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_Checkmark1"].BorderSizePixel = 0
				TOGGLE["_Checkmark1"].Position = UDim2.new(0.5, 0, 0.5, 0)
				TOGGLE["_Checkmark1"].Size = UDim2.new(1, -2, 1, -2)
				TOGGLE["_Checkmark1"].Visible = true
				TOGGLE["_Checkmark1"].ImageTransparency = 1
				TOGGLE["_Checkmark1"].Name = Library:RandomName()
				TOGGLE["_Checkmark1"].Parent = TOGGLE["_CheckmarkHolder1"]

				TOGGLE["_Button"].ImageTransparency = 1
				TOGGLE["_Button"].BackgroundTransparency = 1
				TOGGLE["_Button"].Position = UDim2.new(0, 0, 0, 0)
				TOGGLE["_Button"].Size = UDim2.new(1, 0, 1, 0)
				TOGGLE["_Button"].Name = Library:RandomName()
				TOGGLE["_Button"].Parent = TOGGLE["_ToggleInactive"]
			end

			--Methods
			function TOGGLE:Toggle(v)
				if v == nil then
					TOGGLE.state = not TOGGLE.state
				else
					TOGGLE.state = v
				end

				if TOGGLE.state then
					Library:tween(TOGGLE["_CheckmarkHolder1"], {BackgroundColor3 = Color3.fromRGB(0, 152, 38)})
					Library:tween(TOGGLE["_Checkmark1"], {ImageTransparency = 0})
				else
					Library:tween(TOGGLE["_CheckmarkHolder1"], {BackgroundColor3 = Color3.fromRGB(98, 98, 98)})
					Library:tween(TOGGLE["_Checkmark1"], {ImageTransparency = 1})
				end

				options.callback(TOGGLE.state)
			end

			function TOGGLE:GetToggle()
				return TOGGLE.state
			end

			TOGGLE:Toggle(options.default)


			--Logic
			do
				TOGGLE["_Button"].MouseButton1Click:Connect(function()
					TOGGLE:Toggle()
				end)

				TOGGLE["_ToggleInactive"].MouseEnter:Connect(function()
					TOGGLE.Hover = true

					if not TOGGLE.MouseDown then
						Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(150, 150, 150)})
					end
				end)

				TOGGLE["_ToggleInactive"].MouseLeave:Connect(function()
					TOGGLE.Hover = false

					if not TOGGLE.MouseDown then
						Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(80, 80, 80)})
					end
				end)

				local Connection

				TOGGLE["_Button"].MouseButton1Down:Connect(function()
					TOGGLE.MouseDown = true
					Library:tween(TOGGLE["_ToggleInactive"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(200, 200, 200)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and TOGGLE.MouseDown then
							TOGGLE.MouseDown = false

							if TOGGLE.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(TOGGLE["_ToggleInactive"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(150, 150, 150)})
							else
								Library:tween(TOGGLE["_ToggleInactive"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(80, 80, 80)})
							end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return TOGGLE
		end

		function TAB:CreateDropdown(options)
			options = Library:Validate(
				{
					Name = "Dropdown",
					options = {},
					callback = function(v) print(v) end
				}, options or {})

			local DROPDOWN = {
				Items = options.options,
				Hover = false,
				MouseDown = false,
				state = false,
				HoveringItem = false
			}

			--Render
			do
				DROPDOWN["_Dropdown"] = Instance.new("Frame");
				DROPDOWN["_Button"] = Instance.new("ImageButton")
				DROPDOWN["_UICorner9"] = Instance.new("UICorner")
				DROPDOWN["_UICorner8"] = Instance.new("UICorner");
				DROPDOWN["_UIStroke4"] = Instance.new("UIStroke");
				DROPDOWN["_Title3"] = Instance.new("TextLabel");
				DROPDOWN["_UIPadding11"] = Instance.new("UIPadding");
				DROPDOWN["_UIPadding12"] = Instance.new("UIPadding");
				DROPDOWN["_Icon3"] = Instance.new("ImageLabel");
				DROPDOWN["_OptionHolder"] = Instance.new("ScrollingFrame");
				DROPDOWN["_UIListLayout2"] = Instance.new("UIListLayout");
				DROPDOWN["_UIPadding13"] = Instance.new("UIPadding");

				DROPDOWN["_Dropdown"].BackgroundColor3 = Color3.fromRGB(10.000000353902578, 10.000000353902578, 10.000000353902578)
				DROPDOWN["_Dropdown"].BackgroundTransparency = 0.10000000149011612
				DROPDOWN["_Dropdown"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_Dropdown"].BorderSizePixel = 0
				DROPDOWN["_Dropdown"].ClipsDescendants = true
				DROPDOWN["_Dropdown"].Size = UDim2.new(1, 0, 0, 35)
				DROPDOWN["_Dropdown"].Name = Library:RandomName()
				DROPDOWN["_Dropdown"].Parent = TAB["_HomeTab"]

				DROPDOWN["_UICorner9"].Name = Library:RandomName()
				DROPDOWN["_UICorner9"].CornerRadius = UDim.new(0, 4)
				DROPDOWN["_UICorner9"].Parent = DROPDOWN["_Button"]

				DROPDOWN["_UICorner8"].Name = Library:RandomName()
				DROPDOWN["_UICorner8"].CornerRadius = UDim.new(0, 4)
				DROPDOWN["_UICorner8"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_UIStroke4"].Name = Library:RandomName()
				DROPDOWN["_UIStroke4"].Color = Color3.fromRGB(80.00000283122063, 80.00000283122063, 80.00000283122063)
				DROPDOWN["_UIStroke4"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_Title3"].Font = Enum.Font.Ubuntu
				DROPDOWN["_Title3"].Text = options.Name
				DROPDOWN["_Title3"].TextColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_Title3"].TextSize = 20
				DROPDOWN["_Title3"].TextXAlignment = Enum.TextXAlignment.Left
				DROPDOWN["_Title3"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_Title3"].BackgroundTransparency = 1
				DROPDOWN["_Title3"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_Title3"].BorderSizePixel = 0
				DROPDOWN["_Title3"].Position = UDim2.new(0, 0, 0, 5.75)
				DROPDOWN["_Title3"].Size = UDim2.new(1, -32, 0, 23)
				DROPDOWN["_Title3"].Name = Library:RandomName()
				DROPDOWN["_Title3"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_UIPadding11"].Name = Library:RandomName()
				DROPDOWN["_UIPadding11"].PaddingLeft = UDim.new(0, 10)
				DROPDOWN["_UIPadding11"].Parent = DROPDOWN["_Title3"]

				DROPDOWN["_Icon3"].Image = "rbxassetid://18757413804"
				DROPDOWN["_Icon3"].AnchorPoint = Vector2.new(1, 0)
				DROPDOWN["_Icon3"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_Icon3"].BackgroundTransparency = 1
				DROPDOWN["_Icon3"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_Icon3"].BorderSizePixel = 0
				DROPDOWN["_Icon3"].Position = UDim2.new(1, -6, 0, 7)
				DROPDOWN["_Icon3"].Size = UDim2.new(0, 20, 0, 20)
				DROPDOWN["_Icon3"].Name = Library:RandomName()
				DROPDOWN["_Icon3"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_OptionHolder"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_OptionHolder"].BackgroundTransparency = 1
				DROPDOWN["_OptionHolder"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_OptionHolder"].BorderSizePixel = 0
				DROPDOWN["_OptionHolder"].Position = UDim2.new(0, 0, 0, 35)
				DROPDOWN["_OptionHolder"].Size = UDim2.new(1, 0, 1, -35)
				DROPDOWN["_OptionHolder"].Visible = false
				DROPDOWN["_OptionHolder"].ClipsDescendants = true
				DROPDOWN["_OptionHolder"].CanvasSize = UDim2.new(0, 0, 0, 0)
				DROPDOWN["_OptionHolder"].Name = Library:RandomName()
				DROPDOWN["_OptionHolder"].ScrollBarThickness = 0
				DROPDOWN["_OptionHolder"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_UIPadding13"].Name = Library:RandomName()
				DROPDOWN["_UIPadding13"].PaddingBottom = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].PaddingLeft = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].PaddingRight = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].PaddingTop = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].Parent = DROPDOWN["_OptionHolder"]

				DROPDOWN["_UIListLayout2"].Name = Library:RandomName()
				DROPDOWN["_UIListLayout2"].Padding = UDim.new(0, 5)
				DROPDOWN["_UIListLayout2"].SortOrder = Enum.SortOrder.LayoutOrder
				DROPDOWN["_UIListLayout2"].Parent = DROPDOWN["_OptionHolder"]

				DROPDOWN["_Button"].ImageTransparency = 1
				DROPDOWN["_Button"].BackgroundTransparency = 1
				DROPDOWN["_Button"].Position = UDim2.new(0, 0, 0, 0)
				DROPDOWN["_Button"].Size = UDim2.new(1, 0, 0, 35)
				DROPDOWN["_Button"].Name = Library:RandomName()
				DROPDOWN["_Button"].Parent = DROPDOWN["_Dropdown"]
			end


			--Methods
			function DROPDOWN:Add(id, value)
				local Item = {
					Hover = false,
					MouseDown = false
				}

				DROPDOWN.Items[id] = {
					instance = {},
					value = value
				}

				DROPDOWN.Items[id].instance["_Inactive1"] = Instance.new("TextLabel");
				DROPDOWN.Items[id].instance["_Button"] = Instance.new("ImageButton");
				DROPDOWN.Items[id].instance["_UICorner10"] = Instance.new("UICorner");
				DROPDOWN.Items[id].instance["_UICorner9"] = Instance.new("UICorner");
				DROPDOWN.Items[id].instance["_UIStroke5"] = Instance.new("UIStroke");

				DROPDOWN.Items[id].instance["_Inactive1"].Font = Enum.Font.Ubuntu
				DROPDOWN.Items[id].instance["_Inactive1"].Text = id
				DROPDOWN.Items[id].instance["_Inactive1"].TextColor3 = Color3.fromRGB(226.00001692771912, 226.00001692771912, 226.00001692771912)
				DROPDOWN.Items[id].instance["_Inactive1"].TextSize = 15
				DROPDOWN.Items[id].instance["_Inactive1"].BackgroundColor3 = Color3.fromRGB(81.00000277161598, 81.00000277161598, 81.00000277161598)
				DROPDOWN.Items[id].instance["_Inactive1"].BackgroundTransparency = 0.5
				DROPDOWN.Items[id].instance["_Inactive1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN.Items[id].instance["_Inactive1"].BorderSizePixel = 0
				DROPDOWN.Items[id].instance["_Inactive1"].Size = UDim2.new(1, 0, 0, 20)
				DROPDOWN.Items[id].instance["_Inactive1"].Name = Library:RandomName()
				DROPDOWN.Items[id].instance["_Inactive1"].Parent = DROPDOWN["_OptionHolder"]

				DROPDOWN.Items[id].instance["_Button"].ImageTransparency = 1
				DROPDOWN.Items[id].instance["_Button"].BackgroundTransparency = 1
				DROPDOWN.Items[id].instance["_Button"].Position = UDim2.new(0, 0, 0, 0)
				DROPDOWN.Items[id].instance["_Button"].Size = UDim2.new(1, 0, 1, 0)
				DROPDOWN.Items[id].instance["_Button"].Name = Library:RandomName()
				DROPDOWN.Items[id].instance["_Button"].Parent = DROPDOWN.Items[id].instance["_Inactive1"]

				DROPDOWN.Items[id].instance["_UICorner10"].Name = Library:RandomName()
				DROPDOWN.Items[id].instance["_UICorner10"].CornerRadius = UDim.new(0, 4)
				DROPDOWN.Items[id].instance["_UICorner10"].Parent = DROPDOWN.Items[id].instance["_Button"]

				DROPDOWN.Items[id].instance["_UICorner9"].CornerRadius = UDim.new(0, 4)
				DROPDOWN.Items[id].instance["_UICorner9"].Parent = DROPDOWN.Items[id].instance["_Inactive1"]

				DROPDOWN.Items[id].instance["_UIStroke5"].ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				DROPDOWN.Items[id].instance["_UIStroke5"].Color = Color3.fromRGB(117, 117, 117)
				DROPDOWN.Items[id].instance["_UIStroke5"].Parent = DROPDOWN.Items[id].instance["_Inactive1"]

				DROPDOWN.Items[id].instance["_Button"].MouseButton1Click:Connect(function()
					options.callback(value)
					DROPDOWN:Toggle()
				end)

				DROPDOWN.Items[id].instance["_Inactive1"].MouseEnter:Connect(function()
					Item.Hover = true
					DROPDOWN.HoveringItem = true

					if not Item.MouseDown then
						Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(255, 255, 255)})
					end
				end)

				DROPDOWN.Items[id].instance["_Inactive1"].MouseLeave:Connect(function()
					Item.Hover = false
					DROPDOWN.HoveringItem = false

					if not Item.MouseDown then
						Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(117, 117, 117)})
					end
				end)

				local Connection

				DROPDOWN.Items[id].instance["_Button"].MouseButton1Down:Connect(function()
					Item.MouseDown = true
					Library:tween(DROPDOWN.Items[id].instance["_Inactive1"], {BackgroundColor3 = Color3.fromRGB(120, 120, 120)})
					Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(255,255,255)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and Item.MouseDown then
							Item.MouseDown = false

							if Item.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(DROPDOWN.Items[id].instance["_Inactive1"], {BackgroundColor3 = Color3.fromRGB(81, 81, 81)})
								Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(25, 255, 255)})
							else
								Library:tween(DROPDOWN.Items[id].instance["_Inactive1"], {BackgroundColor3 = Color3.fromRGB(81, 81, 81)})
								Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(117, 117, 117)})
							end
						end
						if Connection then Connection:Disconnect() Connection = nil end
					end)
				end)
			end

			function DROPDOWN:Remove(id)
				if DROPDOWN.Items[id] ~= nil then
					for i, v in pairs(DROPDOWN.Items[id].instance) do
						v:Destroy()
					end
					DROPDOWN.Items[id] = nil
				end
			end

			function DROPDOWN:Clear()
				for i, v in pairs(DROPDOWN.Items) do
					DROPDOWN:Remove(i)
				end
			end

			function DROPDOWN:Toggle()
				local maxcount = 5
				local count = 0
				for i, v in pairs(DROPDOWN.Items) do
					if v ~= nil then
						count += 1
					end
				end

				if DROPDOWN.state then
					if count <= maxcount then
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset - count * 26))
					else
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset - maxcount * 26))
					end
					DROPDOWN["_OptionHolder"].Visible = false
					Library:tween(DROPDOWN["_Dropdown"], {Size = UDim2.new(1, 0, 0, 35)})
				else
					if count <= maxcount then
						Library:tween(DROPDOWN["_Dropdown"], {Size = UDim2.new(1, 0, 0, 35 + (count * 26))})
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset + count * 26))
					else
						Library:tween(DROPDOWN["_Dropdown"], {Size = UDim2.new(1, 0, 0, 35 + (maxcount * 26))})
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset + maxcount * 26))
					end
					DROPDOWN["_OptionHolder"].Visible = true
					DROPDOWN["_OptionHolder"].CanvasSize = UDim2.new(0, 0, 0, (count *  26))
				end

				DROPDOWN.state = not DROPDOWN.state
			end

			for i, v in pairs(options.options) do
				if v then
					DROPDOWN:Add(i, v)
				end
			end


			--Logic
			do
				DROPDOWN["_Button"].MouseButton1Click:Connect(function()
					if not DROPDOWN.HoveringItem then
						DROPDOWN:Toggle()
					end
				end)

				DROPDOWN["_Dropdown"].MouseEnter:Connect(function()
					DROPDOWN.Hover = true

					if not DROPDOWN.MouseDown then
						Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(150, 150, 150)})
					end
				end)

				DROPDOWN["_Dropdown"].MouseLeave:Connect(function()
					DROPDOWN.Hover = false

					if not DROPDOWN.MouseDown then
						Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(80, 80, 80)})
					end
				end)

				local Connection

				DROPDOWN["_Button"].MouseButton1Down:Connect(function()
					DROPDOWN.MouseDown = true
					Library:tween(DROPDOWN["_Dropdown"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(200, 200, 200)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and DROPDOWN.MouseDown then
							DROPDOWN.MouseDown = false

							if DROPDOWN.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(DROPDOWN["_Dropdown"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(150, 150, 150)})
							else
								Library:tween(DROPDOWN["_Dropdown"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(80, 80, 80)})
							end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return DROPDOWN
		end

		return TAB
	end

	return GUI
end

return Library--Services
local lp = game:GetService("Players").LocalPlayer
local TS = game:GetService("TweenService")
local rs = game:GetService("RunService")
local uis = game:GetService("UserInputService")

--Variables
local mouse = lp:GetMouse()
local viewport = workspace.CurrentCamera.ViewportSize
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

local Library = {}

function Library:Validate(defaults, options)
	for i, v in pairs(defaults) do
		if not options[i] then
			options[i] = v
		end
	end
	return options
end

function Library:tween(obj, goal, callback)
	local tween = TS:Create(obj, tweenInfo, goal)
	tween.Completed:Connect(callback or function() end)
	tween:Play()
	return tween
end

function Library:RandomName()
	local length = math.random(30, 50)
	local name = {}

	for i = 0, length do
		local char = string.char(math.random(0, 255))
		name[i] = char
	end

	return table.concat(name)
end

function Library:Destroy()
	for i, v in pairs(Library) do
		if typeof(v) == "Instance" then
			v:Destroy()
			Library[i] = nil
		else
			Library[i] = nil
		end
	end
end

--Library._UI
Library["_UI"] = Instance.new("ScreenGui");

Library["_UI"].IgnoreGuiInset = true
Library["_UI"].ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets
Library["_UI"].ResetOnSpawn = false
Library["_UI"].Name = Library:RandomName()
Library["_UI"].Parent = rs:IsStudio() and lp:WaitForChild("PlayerGui") or game:GetService("CoreGui")

--Notification
Library["_Notifications"] = Instance.new("Frame");
Library["_UIPadding15"] = Instance.new("UIPadding");
Library["_Notify"] = Instance.new("Frame");
Library["_UICorner21"] = Instance.new("UICorner");
Library["_UIStroke12"] = Instance.new("UIStroke");
Library["_Description"] = Instance.new("TextLabel");
Library["_UIPadding16"] = Instance.new("UIPadding");
Library["_Title7"] = Instance.new("TextLabel");
Library["_UIPadding17"] = Instance.new("UIPadding");

Library["_Notifications"].AnchorPoint = Vector2.new(1, 0)
Library["_Notifications"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Library["_Notifications"].BackgroundTransparency = 1
Library["_Notifications"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Notifications"].BorderSizePixel = 0
Library["_Notifications"].Position = UDim2.new(1, 0, 0, 0)
Library["_Notifications"].Size = UDim2.new(0.238322213, 0, 1, 0)
Library["_Notifications"].Name = Library:RandomName()
Library["_Notifications"].Parent = Library["_UI"]

Library["_UIPadding15"].PaddingBottom = UDim.new(0, 10)
Library["_UIPadding15"].PaddingRight = UDim.new(0, 10)
Library["_UIPadding15"].Name = Library:RandomName()
Library["_UIPadding15"].Parent = Library["_Notifications"]

Library["_Notify"].AnchorPoint = Vector2.new(0.5, 1)
Library["_Notify"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
Library["_Notify"].BackgroundTransparency = 0.5
Library["_Notify"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Notify"].BorderSizePixel = 0
Library["_Notify"].Position = UDim2.new(1.5, 6, 1, 0)
Library["_Notify"].Size = UDim2.new(0.959999979, 0, 0.101214573, 0)
Library["_Notify"].Name = Library:RandomName()
Library["_Notify"].Parent = Library["_UI"]

Library["_UICorner21"].CornerRadius = UDim.new(0, 4)
Library["_UICorner21"].Name = Library:RandomName()
Library["_UICorner21"].Parent = Library["_Notify"]

Library["_UIStroke12"].Color = Color3.fromRGB(40.00000141561031, 40.00000141561031, 40.00000141561031)
Library["_UIStroke12"].Thickness = 3
Library["_UIStroke12"].Name = Library:RandomName()
Library["_UIStroke12"].Parent = Library["_Notify"]

Library["_Description"].Font = Enum.Font.Ubuntu
Library["_Description"].Text = "Description"
Library["_Description"].TextColor3 = Color3.fromRGB(255, 255, 255)
Library["_Description"].TextScaled = true
Library["_Description"].TextSize = 20
Library["_Description"].TextWrapped = true
Library["_Description"].TextXAlignment = Enum.TextXAlignment.Left
Library["_Description"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Library["_Description"].BackgroundTransparency = 1
Library["_Description"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Description"].BorderSizePixel = 0
Library["_Description"].Position = UDim2.new(0, 0, 0.5, 0)
Library["_Description"].Size = UDim2.new(1, 0, 0.5, 0)
Library["_Description"].Name = Library:RandomName()
Library["_Description"].Parent = Library["_Notify"]

Library["_UIPadding16"].PaddingLeft = UDim.new(0, 10)
Library["_UIPadding16"].PaddingBottom = UDim.new(0, 2)
Library["_UIPadding16"].Name = Library:RandomName()
Library["_UIPadding16"].Parent = Library["_Description"]

Library["_Title7"].Font = Enum.Font.Unknown
Library["_Title7"].RichText = true
Library["_Title7"].Text = "<b>Title</b>"
Library["_Title7"].TextColor3 = Color3.fromRGB(255, 255, 255)
Library["_Title7"].TextScaled = true
Library["_Title7"].TextSize = 25
Library["_Title7"].TextWrapped = true
Library["_Title7"].TextXAlignment = Enum.TextXAlignment.Left
Library["_Title7"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Library["_Title7"].BackgroundTransparency = 1
Library["_Title7"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Title7"].BorderSizePixel = 0
Library["_Title7"].Position = UDim2.new(0, 0, 0, 0)
Library["_Title7"].Size = UDim2.new(1, 0, 0.5, 0)
Library["_Title7"].Name = Library:RandomName()
Library["_Title7"].Parent = Library["_Notify"]

Library["_UIPadding17"].PaddingLeft = UDim.new(0, 10)
Library["_UIPadding17"].PaddingTop = UDim.new(0, 2)
Library["_UIPadding17"].Name = Library:RandomName()
Library["_UIPadding17"].Parent = Library["_Title7"]

local maxNotifications = 5
local notificationPadding = 13

local queuedNotifications = {}

local function NotificationUpTween(notificationFrame: Frame)

	local offsetY = (Library["_Notifications"].AbsoluteSize.Y * notificationFrame.Size.Y.Scale + notificationFrame.Size.Y.Offset) + notificationPadding
	local scaleY = offsetY / Library["_Notifications"].AbsoluteSize.Y
	local newY = notificationFrame.Position.Y.Scale - scaleY

	local goalProperties = {
		Position = UDim2.new(0.5, 0, newY, 0);
	}
	local tween = Library.tween and Library:tween(notificationFrame, goalProperties)
end

local function NotificationInTween(notificationFrame: Frame)

	local goalProperties = {
		Position = UDim2.new(0.5, 0, 1, 0);
	}

	local tween = Library.tween and Library:tween(notificationFrame, goalProperties)

	if tween then tween.Completed:Wait() end
end

local function NotificationOutTween(notificationFrame: Frame)

	notificationFrame.Name = "Removing"

	local goalProperties = {
		Position = UDim2.new(1.5, 6, notificationFrame.Position.Y.Scale, 0);
	}

	local tween = Library.tween and Library:tween(notificationFrame, goalProperties)

	if tween then
		tween.Completed:Wait()

		notificationFrame:Destroy()
	end
end


local function ShiftNotificationsUp()

	local existingNotifications = {}

	for _, child in pairs(Library["_Notifications"]:GetChildren()) do

		if child:IsA("Frame") and child.Name ~= "Removing" then
			table.insert(existingNotifications, child)
		end
	end

	table.sort(existingNotifications, function(a, b)
		return a.AbsolutePosition.Y < b.AbsolutePosition.Y
	end)

	if #existingNotifications >= maxNotifications then

		for i = 1, #existingNotifications - maxNotifications + 1 do

			local existingNotification = existingNotifications[i]
			NotificationOutTween(existingNotification)
		end
	end

	for _, notificationFrame in pairs(existingNotifications) do
		NotificationUpTween(notificationFrame)
	end

	task.wait(tweenInfo.Time)
end


function Library:CreateNotification(options: {Title: string, Description: string, Time: number, SoundId: string | number, Color: Color3})
	options = Library:Validate(
		{
			Title = "Title",
			Description = "Description",
			Time = 8,
			SoundId = "rbxassetid://6026984224",
			Color = Color3.new(255, 255, 255)
		}, options or {})

	table.insert(queuedNotifications, options)

	while table.find(queuedNotifications, options) ~= 1 do
		rs.Heartbeat:Wait()
	end

	local soundObject = Instance.new("Sound")
	soundObject.SoundId = options.SoundId
	soundObject.Parent = script
	soundObject:Play()

	soundObject.Ended:Connect(function()
		soundObject:Destroy()
	end)

	task.wait(0.5)

	ShiftNotificationsUp()

	local notificationFrame = Library["_Notify"]:Clone()
	local title = notificationFrame[Library["_Title7"].Name]
	local descrition = notificationFrame[Library["_Description"].Name]

	notificationFrame.Name = Library:RandomName()
	title.Name = Library:RandomName()
	title.RichText = true
	descrition.Name = Library:RandomName()

	title.Text = "<b>"..options.Title.."</b>"
	title.TextColor3 = options.Color
	descrition.Text = options.Description
	notificationFrame.Parent = Library["_Notifications"]

	task.spawn(NotificationInTween, notificationFrame)

	table.remove(queuedNotifications, 1)

	task.spawn(function()

		task.wait(options.Time)
		NotificationOutTween(notificationFrame)
	end)
end


function Library:Init(options)
	options = Library:Validate(
		{
			Name = "Wayfer Library"
		}, options or {})

	local GUI = {
		CurrentTab = nil
	}


	--Main Frame
	do
		GUI["_Main"] = Instance.new("Frame");
		GUI["_UICorner"] = Instance.new("UICorner");
		GUI["_DropShadowHolder"] = Instance.new("Frame");
		GUI["_DropShadow"] = Instance.new("ImageLabel");
		GUI["_HeadBar"] = Instance.new("Frame");
		GUI["_UICorner1"] = Instance.new("UICorner");
		GUI["_Hide"] = Instance.new("Frame");
		GUI["_Close"] = Instance.new("ImageLabel");
		GUI["_Button"] = Instance.new("ImageButton");
		GUI["_UICorner5"] = Instance.new("UICorner");
		GUI["_UICorner3"] = Instance.new("UICorner");
		GUI["_Minimize"] = Instance.new("ImageLabel");
		GUI["_Button1"] = Instance.new("ImageButton");
		GUI["_UICorner6"] = Instance.new("UICorner");
		GUI["_UICorner7"] = Instance.new("UICorner");
		GUI["_Name"] = Instance.new("TextLabel");
		GUI["_UIPadding"] = Instance.new("UIPadding");
		GUI["_Dragger"] = Instance.new("ImageButton");
		GUI["_UICorner4"] = Instance.new("UICorner");
		GUI["_ContentContainer"] = Instance.new("Frame");

		do
			--Boot Animation
			GUI["_Boot"] = Instance.new("Frame");
			GUI["_Left"] = Instance.new("Frame");
			GUI["_Logo"] = Instance.new("ImageLabel");
			GUI["_Right"] = Instance.new("Frame");
			GUI["_Logo1"] = Instance.new("ImageLabel");

			GUI["_Boot"].AnchorPoint = Vector2.new(0.5, 0.5)
			GUI["_Boot"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Boot"].BackgroundTransparency = 1
			GUI["_Boot"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Boot"].BorderSizePixel = 0
			GUI["_Boot"].Position = UDim2.new(0.5, 0, 0.5, 0)
			GUI["_Boot"].Size = UDim2.new(0, 400, 0, 400)
			GUI["_Boot"].Name = Library:RandomName()
			GUI["_Boot"].Parent = Library["_UI"]

			GUI["_Left"].AnchorPoint = Vector2.new(1, 0.5)
			GUI["_Left"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Left"].BackgroundTransparency = 1
			GUI["_Left"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Left"].BorderSizePixel = 0
			GUI["_Left"].ClipsDescendants = true
			GUI["_Left"].Position = UDim2.new(0.5, 0, 0.5, 0)
			GUI["_Left"].Size = UDim2.new(0, 0, 0, 400)
			GUI["_Left"].Name = Library:RandomName()
			GUI["_Left"].Parent = GUI["_Boot"]

			GUI["_Logo"].Image = "rbxassetid://133601166692855"
			GUI["_Logo"].AnchorPoint = Vector2.new(1, 0.5)
			GUI["_Logo"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Logo"].BackgroundTransparency = 1
			GUI["_Logo"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Logo"].BorderSizePixel = 0
			GUI["_Logo"].Position = UDim2.new(1, 200, 0.5, 0)
			GUI["_Logo"].Size = UDim2.new(0, 400, 0, 400)
			GUI["_Logo"].Name = Library:RandomName()
			GUI["_Logo"].Parent = GUI["_Left"]

			GUI["_Right"].AnchorPoint = Vector2.new(0, 0.5)
			GUI["_Right"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Right"].BackgroundTransparency = 1
			GUI["_Right"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Right"].BorderSizePixel = 0
			GUI["_Right"].ClipsDescendants = true
			GUI["_Right"].Position = UDim2.new(0.5, 0, 0.5, 0)
			GUI["_Right"].Size = UDim2.new(0, 0, 0, 400)
			GUI["_Right"].Name = Library:RandomName()
			GUI["_Right"].Parent = GUI["_Boot"]

			GUI["_Logo1"].Image = "rbxassetid://133601166692855"
			GUI["_Logo1"].AnchorPoint = Vector2.new(0, 0.5)
			GUI["_Logo1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Logo1"].BackgroundTransparency = 1
			GUI["_Logo1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Logo1"].BorderSizePixel = 0
			GUI["_Logo1"].Position = UDim2.new(0, -200, 0.5, 0)
			GUI["_Logo1"].Size = UDim2.new(0, 400, 0, 400)
			GUI["_Logo1"].Name = Library:RandomName()
			GUI["_Logo1"].Parent = GUI["_Right"]


			local tweenL = TS:Create(GUI["_Left"], TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 200, 0, 400)})
			local tweenR = TS:Create(GUI["_Right"], TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 200, 0, 400)})
			tweenL:Play()
			tweenR:Play()
			tweenL.Completed:Wait()
			task.wait(2)
			GUI["_Boot"]:Destroy()
		end

		GUI["_Main"].AnchorPoint = Vector2.new(0, 0)
		GUI["_Main"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
		GUI["_Main"].BackgroundTransparency = 0.5
		GUI["_Main"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Main"].BorderSizePixel = 0
		GUI["_Main"].Size = UDim2.new(0.571, 0, 0.81, 0)
		GUI["_Main"].Position = UDim2.fromOffset((viewport.X / 2) - ((GUI["_Main"].Size.X.Scale * viewport.X) / 2), (viewport.Y / 2) - ((GUI["_Main"].Size.Y.Scale * viewport.Y) / 2))
		GUI["_Main"].Name = Library:RandomName()
		GUI["_Main"].Parent = Library["_UI"]

		GUI["_UICorner"].Name = Library:RandomName()
		GUI["_UICorner"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner"].Parent = GUI["_Main"]

		GUI["_DropShadowHolder"].BackgroundTransparency = 1
		GUI["_DropShadowHolder"].BorderSizePixel = 0
		GUI["_DropShadowHolder"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_DropShadowHolder"].ZIndex = 0
		GUI["_DropShadowHolder"].Name = Library:RandomName()
		GUI["_DropShadowHolder"].Parent = GUI["_Main"]

		GUI["_DropShadow"].Image = "rbxassetid://6014261993"
		GUI["_DropShadow"].ImageColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_DropShadow"].ImageTransparency = 0.5
		GUI["_DropShadow"].ScaleType = Enum.ScaleType.Slice
		GUI["_DropShadow"].SliceCenter = Rect.new(49, 49, 450, 450)
		GUI["_DropShadow"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_DropShadow"].BackgroundTransparency = 1
		GUI["_DropShadow"].BorderSizePixel = 0
		GUI["_DropShadow"].Position = UDim2.new(0.5, 0, 0.5, 0)
		GUI["_DropShadow"].Size = UDim2.new(1, 47, 1, 47)
		GUI["_DropShadow"].ZIndex = 0
		GUI["_DropShadow"].Name = Library:RandomName()
		GUI["_DropShadow"].Parent = GUI["_DropShadowHolder"]

		GUI["_HeadBar"].BackgroundColor3 = Color3.fromRGB(30.00000201165676, 30.00000201165676, 30.00000201165676)
		GUI["_HeadBar"].BackgroundTransparency = 0.5
		GUI["_HeadBar"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_HeadBar"].BorderSizePixel = 0
		GUI["_HeadBar"].Size = UDim2.new(1, 0, 0, 30)
		GUI["_HeadBar"].Name = Library:RandomName()
		GUI["_HeadBar"].Parent = GUI["_Main"]

		GUI["_UICorner1"].Name = Library:RandomName()
		GUI["_UICorner1"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner1"].Parent = GUI["_HeadBar"]

		GUI["_Hide"].AnchorPoint = Vector2.new(0, 1)
		GUI["_Hide"].BackgroundColor3 = Color3.fromRGB(30.00000011175871, 30.00000011175871, 30.00000011175871)
		GUI["_Hide"].BackgroundTransparency = 0.5
		GUI["_Hide"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Hide"].BorderSizePixel = 0
		GUI["_Hide"].Position = UDim2.new(0, 0, 1, 0)
		GUI["_Hide"].Size = UDim2.new(1, 0, 0.1, 0)
		GUI["_Hide"].Name = Library:RandomName()
		GUI["_Hide"].Parent = GUI["_HeadBar"]

		GUI["_Close"].Image = "rbxassetid://18756175936"
		GUI["_Close"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Close"].BackgroundColor3 = Color3.fromRGB(163, 5, 5)
		GUI["_Close"].BackgroundTransparency = 1
		GUI["_Close"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Close"].BorderSizePixel = 0
		GUI["_Close"].Position = UDim2.new(1, -20, 1, -15)
		GUI["_Close"].Size = UDim2.new(0, 20, 0, 20)
		GUI["_Close"].ZIndex = 2
		GUI["_Close"].Name = Library:RandomName()
		GUI["_Close"].Parent = GUI["_HeadBar"]

		GUI["_Button"].ImageTransparency = 1
		GUI["_Button"].BackgroundTransparency = 1
		GUI["_Button"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Button"].Position = UDim2.new(0.5, 0, 0.5, 0)
		GUI["_Button"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_Button"].Name = Library:RandomName()
		GUI["_Button"].Parent = GUI["_Close"]

		GUI["_UICorner5"].Name = Library:RandomName()
		GUI["_UICorner5"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner5"].Parent = GUI["_Button"]

		GUI["_UICorner3"].Name = Library:RandomName()
		GUI["_UICorner3"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner3"].Parent = GUI["_Close"]

		GUI["_Minimize"].Image = "rbxassetid://18756204039"
		GUI["_Minimize"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Minimize"].BackgroundColor3 = Color3.fromRGB(122, 122, 122)
		GUI["_Minimize"].BackgroundTransparency = 1
		GUI["_Minimize"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Minimize"].BorderSizePixel = 0
		GUI["_Minimize"].Position = UDim2.new(1, -50, 1, -15)
		GUI["_Minimize"].Size = UDim2.new(0, 20, 0, 20)
		GUI["_Minimize"].ZIndex = 2
		GUI["_Minimize"].Name = Library:RandomName()
		GUI["_Minimize"].Parent = GUI["_HeadBar"]

		GUI["_Button1"].ImageTransparency = 1
		GUI["_Button1"].BackgroundTransparency = 1
		GUI["_Button1"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Button1"].Position = UDim2.new(0.5, 0, 0.5, 0)
		GUI["_Button1"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_Button1"].Name = Library:RandomName()
		GUI["_Button1"].Parent = GUI["_Minimize"]

		GUI["_UICorner6"].Name = Library:RandomName()
		GUI["_UICorner6"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner6"].Parent = GUI["_Button1"]

		GUI["_UICorner7"].Name = Library:RandomName()
		GUI["_UICorner7"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner7"].Parent = GUI["_Minimize"]

		GUI["_UIPadding"].Name = Library:RandomName()
		GUI["_UIPadding"].PaddingLeft = UDim.new(0, 8)
		GUI["_UIPadding"].PaddingTop = UDim.new(0, -4)
		GUI["_UIPadding"].Parent = GUI["_Name"]

		GUI["_Name"].Font = Enum.Font.Ubuntu
		GUI["_Name"].Text = options.Name
		GUI["_Name"].TextColor3 = Color3.fromRGB(255, 255, 255)
		GUI["_Name"].TextSize = 20
		GUI["_Name"].TextWrapped = false
		GUI["_Name"].TextXAlignment = Enum.TextXAlignment.Left
		GUI["_Name"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		GUI["_Name"].BackgroundTransparency = 1
		GUI["_Name"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Name"].BorderSizePixel = 0
		GUI["_Name"].Position = UDim2.new(0, 0, 0, 1)
		GUI["_Name"].Size = UDim2.new(0.5, 0, 1, -2)
		GUI["_Name"].Name = Library:RandomName()
		GUI["_Name"].Parent = GUI["_HeadBar"]
		GUI["_Name"].Size = UDim2.new(0, GUI["_Name"].TextBounds.X + GUI["_UIPadding"].PaddingLeft.Offset, 1, 0)

		GUI["_Dragger"].Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
		GUI["_Dragger"].ImageTransparency = 1
		GUI["_Dragger"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		GUI["_Dragger"].BackgroundTransparency = 1
		GUI["_Dragger"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Dragger"].BorderSizePixel = 0
		GUI["_Dragger"].Size = UDim2.new(1, -60, 1, 0)
		GUI["_Dragger"].Name = Library:RandomName()
		GUI["_Dragger"].Parent = GUI["_HeadBar"]

		GUI["_UICorner4"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner4"].Name = Library:RandomName()
		GUI["_UICorner4"].Parent = GUI["_Dragger"]

		GUI["_ContentContainer"].AnchorPoint = Vector2.new(1, 0)
		GUI["_ContentContainer"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
		GUI["_ContentContainer"].BackgroundTransparency = 1
		GUI["_ContentContainer"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_ContentContainer"].BorderSizePixel = 0
		GUI["_ContentContainer"].ClipsDescendants = true
		GUI["_ContentContainer"].Position = UDim2.new(1, -6, 0, 36)
		GUI["_ContentContainer"].Size = UDim2.new(0.647, 0, 1, -42)
		GUI["_ContentContainer"].Name = Library:RandomName()
		GUI["_ContentContainer"].Parent = GUI["_Main"]
	end

	--Navigation Frame
	do
		GUI["_Navigation"] = Instance.new("Frame");
		GUI["_UICorner2"] = Instance.new("UICorner");
		GUI["_Hide1"] = Instance.new("Frame");
		GUI["_Hide2"] = Instance.new("Frame");
		GUI["_ButtonHolder"] = Instance.new("ScrollingFrame");
		GUI["_UIListLayout"] = Instance.new("UIListLayout");
		GUI["_UIPadding1"] = Instance.new("UIPadding");

		GUI["_Navigation"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_Navigation"].BackgroundTransparency = 0.5
		GUI["_Navigation"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Navigation"].BorderSizePixel = 0
		GUI["_Navigation"].Position = UDim2.new(0, 0, 0, 30)
		GUI["_Navigation"].Size = UDim2.new(0.333, 0, 1, -30)
		GUI["_Navigation"].Name = Library:RandomName()
		GUI["_Navigation"].Parent = GUI["_Main"]

		GUI["_UICorner2"].Name = Library:RandomName()
		GUI["_UICorner2"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner2"].Parent = GUI["_Navigation"]

		GUI["_Hide1"].AnchorPoint = Vector2.new(1, 0)
		GUI["_Hide1"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_Hide1"].BackgroundTransparency = 0.5
		GUI["_Hide1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Hide1"].BorderSizePixel = 0
		GUI["_Hide1"].Position = UDim2.new(1, 0, 0, 0)
		GUI["_Hide1"].Size = UDim2.new(0, 3, 1, 0)
		GUI["_Hide1"].Name = Library:RandomName()
		GUI["_Hide1"].Parent = GUI["_Navigation"]

		GUI["_Hide2"].AnchorPoint = Vector2.new(0, 1)
		GUI["_Hide2"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_Hide2"].BackgroundTransparency = 0.5
		GUI["_Hide2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Hide2"].BorderSizePixel = 0
		GUI["_Hide2"].Position = UDim2.new(0, 0, 0, 3)
		GUI["_Hide2"].Size = UDim2.new(1, 0, 0, 4)
		GUI["_Hide2"].Name = Library:RandomName()
		GUI["_Hide2"].Parent = GUI["_Navigation"]

		GUI["_ButtonHolder"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_ButtonHolder"].BackgroundTransparency = 0.5
		GUI["_ButtonHolder"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_ButtonHolder"].BorderSizePixel = 0
		GUI["_ButtonHolder"].ScrollBarThickness = 0
		GUI["_ButtonHolder"].CanvasSize = UDim2.new(0, 0, 0, 0)
		GUI["_ButtonHolder"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_ButtonHolder"].Name = Library:RandomName()
		GUI["_ButtonHolder"].Parent = GUI["_Navigation"]

		GUI["_UIListLayout"].Name = Library:RandomName()
		GUI["_UIListLayout"].Padding = UDim.new(0, 1)
		GUI["_UIListLayout"].SortOrder = Enum.SortOrder.LayoutOrder
		GUI["_UIListLayout"].Parent = GUI["_ButtonHolder"]

		GUI["_UIPadding1"].Name = Library:RandomName()
		GUI["_UIPadding1"].PaddingBottom = UDim.new(0, 8)
		GUI["_UIPadding1"].PaddingTop = UDim.new(0, 8)
		GUI["_UIPadding1"].PaddingLeft = UDim.new(0, 6)
		GUI["_UIPadding1"].PaddingRight = UDim.new(0, 3)
		GUI["_UIPadding1"].Parent = GUI["_ButtonHolder"]
	end

	--Logic
	do
		local dragToggle
		local dragStart
		local startPos

		local closeB = {
			Hover = false,
			MouseDown = false
		}

		local minimizeB = {
			Hover = false,
			MouseDown = false,
			state = true
		}

		--Drag Logic
		local function updateInput(input)
			local delta = input.Position - dragStart
			local position = UDim2.new(startPos.X.Scale, math.clamp(startPos.X.Offset + delta.X, 0, viewport.X - GUI["_Main"].AbsoluteSize.X), startPos.Y.Scale, math.clamp(startPos.Y.Offset + delta.Y, 0, viewport.Y - GUI["_Main"].AbsoluteSize.Y))
			GUI["_Main"].Position = position
		end

		local Connection


		GUI["_Dragger"].MouseButton1Down:Connect(function()
			if (not closeB.MouseDown and not closeB.Hover) and (not minimizeB.MouseDown and not minimizeB.Hover) then
				dragToggle = true
				dragStart = Vector3.new(mouse.X, mouse.Y, 0)
				startPos = GUI["_Main"].Position

				Connection = uis.InputEnded:Connect(function(input, gpe)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and dragToggle then
						dragToggle = false
						if Connection then Connection:Disconnect() Connection = nil end
					end
				end)
			end
		end)
		
		uis.TouchMoved:Connect(function(input)
			if dragToggle then
				updateInput(input)
			end
		end)

		uis.InputChanged:Connect(function(input)
			if dragToggle then
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					updateInput(input)
				end
			end
		end)


		--Close Logic
		GUI["_Button"].MouseButton1Click:Connect(function()
			for i, v in pairs(GUI) do
				if typeof(v) == "Instance" then
					v:Destroy()
					GUI[i] = nil
				else
					GUI[i] = nil
				end
			end
		end)

		GUI["_Close"].MouseEnter:Connect(function()
			closeB.Hover = true

			if not closeB.MouseDown then
				Library:tween(GUI["_Close"], {BackgroundTransparency = 0.5})
			end
		end)

		GUI["_Close"].MouseLeave:Connect(function()
			closeB.Hover = false

			if not closeB.MouseDown then
				Library:tween(GUI["_Close"], {BackgroundTransparency = 1})
			end
		end)

		local Connection

		GUI["_Button"].MouseButton1Down:Connect(function()
			closeB.MouseDown = true
			Library:tween(GUI["_Close"], {BackgroundTransparency = 0})

			Connection = uis.InputEnded:Connect(function(input, gpe)
				if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and closeB.MouseDown then
					closeB.MouseDown = false
					if GUI["_Close"] then
						if closeB.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
							Library:tween(GUI["_Close"], {BackgroundTransparency = 0.5})
						else
							Library:tween(GUI["_Close"], {BackgroundTransparency = 1})
						end
					end
					if Connection then Connection:Disconnect() Connection = nil end
				end
			end)
		end)

		--Minimize Logic
		GUI["_Button1"].MouseButton1Click:Connect(function()
			if minimizeB.state then
				Library:tween(GUI["_Main"], {Size = UDim2.new(0, GUI["_Name"].AbsoluteSize.X + (GUI["_Minimize"].AbsoluteSize.X + GUI["_Close"].AbsoluteSize.X + 30), 0, GUI["_Name"].AbsoluteSize.Y)})
				GUI["_Minimize"].Image = "rbxassetid://18820269724"
				GUI["_DropShadow"].Size = UDim2.new(1, 31, 1, 31)
				GUI["_ContentContainer"].Visible = false
				GUI["_Navigation"].Visible = false
				GUI["_Hide"].Visible = false
			else
				Library:tween(GUI["_Main"], {Size = UDim2.new(0.571, 0, 0.81, 0)})
				GUI["_Minimize"].Image = "rbxassetid://18756204039"
				GUI["_DropShadow"].Size = UDim2.new(1, 47, 1, 47)
				GUI["_ContentContainer"].Visible = true
				GUI["_Navigation"].Visible = true
				GUI["_Hide"].Visible = true
			end
			Library:tween(GUI["_Minimize"], {BackgroundTransparency = 1})
			minimizeB.state = not minimizeB.state
		end)

		GUI["_Minimize"].MouseEnter:Connect(function()
			minimizeB.Hover = true

			if not minimizeB.MouseDown then
				Library:tween(GUI["_Minimize"], {BackgroundTransparency = 0.5})
			end
		end)

		GUI["_Minimize"].MouseLeave:Connect(function()
			minimizeB.Hover = false

			if not minimizeB.MouseDown then
				Library:tween(GUI["_Minimize"], {BackgroundTransparency = 1})
			end
		end)

		local Connection

		GUI["_Button1"].MouseButton1Down:Connect(function()
			minimizeB.MouseDown = true
			Library:tween(GUI["_Minimize"], {BackgroundTransparency = 0})

			Connection = uis.InputEnded:Connect(function(input, gpe)
				if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and minimizeB.MouseDown then
					minimizeB.MouseDown = false

					if minimizeB.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
						Library:tween(GUI["_Minimize"], {BackgroundTransparency = 0.5})
					else
						Library:tween(GUI["_Minimize"], {BackgroundTransparency = 1})
					end
					if Connection then Connection:Disconnect() Connection = nil end
				end
			end)
		end)
	end

	function GUI:CreateTab(options)
		options = Library:Validate(
			{
				Name = "Tab",
				Icon = "rbxassetid://18756559825"
			}, options or {})

		local TAB = {
			Hover = false,
			Active = false,
			MouseDown = false
		}

		--Render
		do
			TAB["_Inactive"] = Instance.new("TextLabel");
			TAB["_UICorner"] = Instance.new("UICorner");
			TAB["_Button"] = Instance.new("ImageButton");
			TAB["_UIPadding3"] = Instance.new("UIPadding");
			TAB["_Icon1"] = Instance.new("ImageLabel");
			TAB["_HomeTab"] = Instance.new("ScrollingFrame");
			TAB["_UIPadding4"] = Instance.new("UIPadding");
			TAB["_UIListLayout1"] = Instance.new("UIListLayout");


			TAB["_Inactive"].Font = Enum.Font.Ubuntu
			TAB["_Inactive"].Text = options.Name
			TAB["_Inactive"].TextColor3 = Color3.fromRGB(200, 200, 200)
			TAB["_Inactive"].TextSize = 20
			TAB["_Inactive"].TextXAlignment = Enum.TextXAlignment.Left
			TAB["_Inactive"].BackgroundColor3 = Color3.fromRGB(86.00000247359276, 86.00000247359276, 86.00000247359276)
			TAB["_Inactive"].BackgroundTransparency = 1
			TAB["_Inactive"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			TAB["_Inactive"].BorderSizePixel = 0
			TAB["_Inactive"].Size = UDim2.new(1, -3, 0, 30)
			TAB["_Inactive"].Name = Library:RandomName()
			TAB["_Inactive"].Parent = GUI["_ButtonHolder"]
			
			TAB["_UICorner"].CornerRadius = UDim.new(0, 4)
			TAB["_UICorner"].Name = Library:RandomName()
			TAB["_UICorner"].Parent = TAB["_Inactive"]

			TAB["_UIPadding3"].Name = Library:RandomName()
			TAB["_UIPadding3"].PaddingLeft = UDim.new(0, 35)
			TAB["_UIPadding3"].Parent = TAB["_Inactive"]

			TAB["_Icon1"].Image = options.Icon
			TAB["_Icon1"].BackgroundColor3 = Color3.fromRGB(153.00000607967377, 153.00000607967377, 153.00000607967377)
			TAB["_Icon1"].BackgroundTransparency = 1
			TAB["_Icon1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			TAB["_Icon1"].BorderSizePixel = 0
			TAB["_Icon1"].Position = UDim2.new(0, -30, 0, 5)
			TAB["_Icon1"].Size = UDim2.new(0, 20, 0, 20)
			TAB["_Icon1"].Name = Library:RandomName()
			TAB["_Icon1"].ImageColor3 = Color3.fromRGB(200, 200, 200)
			TAB["_Icon1"].Parent = TAB["_Inactive"]

			TAB["_Button"].ImageTransparency = 1
			TAB["_Button"].BackgroundTransparency = 1
			TAB["_Button"].Position = UDim2.new(0, -35, 0, 0)
			TAB["_Button"].Size = UDim2.new(1, 35, 1, 0)
			TAB["_Button"].Name = Library:RandomName()
			TAB["_Button"].Parent = TAB["_Inactive"]

			TAB["_HomeTab"].ScrollBarImageTransparency = 1
			TAB["_HomeTab"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
			TAB["_HomeTab"].BackgroundTransparency = 1
			TAB["_HomeTab"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			TAB["_HomeTab"].BorderSizePixel = 0
			TAB["_HomeTab"].ClipsDescendants = false
			TAB["_HomeTab"].Selectable = false
			TAB["_HomeTab"].Size = UDim2.new(1, 0, 1, 0)
			TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, 1)
			TAB["_HomeTab"].ScrollBarThickness = 0
			TAB["_HomeTab"].Name = Library:RandomName()
			TAB["_HomeTab"].Visible = false
			TAB["_HomeTab"].Parent = GUI["_ContentContainer"]

			TAB["_UIPadding4"].Name = Library:RandomName()
			TAB["_UIPadding4"].PaddingBottom = UDim.new(0, 1)
			TAB["_UIPadding4"].PaddingLeft = UDim.new(0, 1)
			TAB["_UIPadding4"].PaddingRight = UDim.new(0, 1)
			TAB["_UIPadding4"].PaddingTop = UDim.new(0, 1)
			TAB["_UIPadding4"].Parent = TAB["_HomeTab"]

			TAB["_UIListLayout1"].Name = Library:RandomName()
			TAB["_UIListLayout1"].Padding = UDim.new(0, 6)
			TAB["_UIListLayout1"].SortOrder = Enum.SortOrder.LayoutOrder
			TAB["_UIListLayout1"].Parent = TAB["_HomeTab"]
		end

		--Methodes
		function TAB:Activate()
			if not TAB.Active then
				if GUI.CurrentTab then
					GUI.CurrentTab:Deactivate()
				end

				TAB.Active = true
				Library:tween(TAB["_Inactive"], {BackgroundTransparency = .8})
				Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
				Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
				TAB["_HomeTab"].Visible = true

				GUI.CurrentTab = TAB
			end
		end

		function TAB:Deactivate()
			if TAB.Active then
				TAB.Active = false
				TAB.Hover = false
				Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
				Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
				Library:tween(TAB["_Inactive"], {BackgroundTransparency = 1})
				TAB["_HomeTab"].Visible = false
			end
		end

		function TAB:ResizeNavigation()
			local count = 0
			for i, v in pairs(GUI["_ButtonHolder"]:GetChildren()) do
				if v:IsA("TextLabel") then
					count += 1
				end
			end

			GUI["_ButtonHolder"].CanvasSize = UDim2.new(0, 0, 0, (32 * count))
		end

		TAB:ResizeNavigation()

		function TAB.ResizeContents(content)
			if content:IsA("Frame") then
				TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset + content.AbsoluteSize.Y) + 6)
			end
		end

		TAB["_HomeTab"].ChildAdded:Connect(TAB.ResizeContents)

		--Logic
		do
			TAB["_Button"].MouseButton1Click:Connect(function()
				TAB:Activate()
			end)

			TAB["_Inactive"].MouseEnter:Connect(function()
				if not TAB.Active then
					TAB.Hover = true

					if not TAB.Active then
						Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
						Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
					end
				end
			end)

			TAB["_Inactive"].MouseLeave:Connect(function()
				if not TAB.Active then
					TAB.Hover = false

					Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
					Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
				end
			end)

			local Connection

			TAB["_Button"].MouseButton1Down:Connect(function()
				TAB.MouseDown = true

				Connection = uis.InputEnded:Connect(function(input, gpe)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and TAB.MouseDown then
						TAB.MouseDown = false
						if Connection then Connection:Disconnect() Connection = nil end
					end
				end)
			end)

			if not GUI.CurrentTab then
				TAB:Activate()
			end
		end

		function TAB:CreateButton(options)
			options = Library:Validate(
				{
					Name = "Button",
					callback = function() end
				}, options or {})

			local BUTTON  = {
				Hover = false,
				MouseDown = false
			}

			--Render
			do
				BUTTON["_Button1"] = Instance.new("Frame");
				BUTTON["_UICorner3"] = Instance.new("UICorner");
				BUTTON["_UIStroke"] = Instance.new("UIStroke");
				BUTTON["_Title"] = Instance.new("TextLabel");
				BUTTON["_Button"] = Instance.new("ImageButton");
				BUTTON["_UICorner4"] = Instance.new("UICorner");
				BUTTON["_UIPadding5"] = Instance.new("UIPadding");
				BUTTON["_UIPadding6"] = Instance.new("UIPadding");
				BUTTON["_Icon2"] = Instance.new("ImageLabel");

				BUTTON["_Button1"].BackgroundColor3 = Color3.fromRGB(10, 10, 10)
				BUTTON["_Button1"].BackgroundTransparency = 0.1
				BUTTON["_Button1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				BUTTON["_Button1"].BorderSizePixel = 0
				BUTTON["_Button1"].Size = UDim2.new(1, 0, 0, 35)
				BUTTON["_Button1"].Name = Library:RandomName()
				BUTTON["_Button1"].Parent = TAB["_HomeTab"]

				BUTTON["_UICorner3"].Name = Library:RandomName()
				BUTTON["_UICorner3"].CornerRadius = UDim.new(0, 4)
				BUTTON["_UICorner3"].Parent = BUTTON["_Button1"]

				BUTTON["_UIStroke"].Name = Library:RandomName()
				BUTTON["_UIStroke"].Color = Color3.fromRGB(80, 80, 80)
				BUTTON["_UIStroke"].Parent = BUTTON["_Button1"]

				BUTTON["_Title"].Font = Enum.Font.Ubuntu
				BUTTON["_Title"].Text = options.Name
				BUTTON["_Title"].TextColor3 = Color3.fromRGB(255, 255, 255)
				BUTTON["_Title"].TextSize = 20
				BUTTON["_Title"].TextXAlignment = Enum.TextXAlignment.Left
				BUTTON["_Title"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				BUTTON["_Title"].BackgroundTransparency = 1
				BUTTON["_Title"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				BUTTON["_Title"].BorderSizePixel = 0
				BUTTON["_Title"].Position = UDim2.new(0, 0, 0, 0)
				BUTTON["_Title"].Size = UDim2.new(1, -32, 1, 0)
				BUTTON["_Title"].Name = Library:RandomName()
				BUTTON["_Title"].Parent = BUTTON["_Button1"]

				BUTTON["_UICorner4"].Name = Library:RandomName()
				BUTTON["_UICorner4"].CornerRadius = UDim.new(0, 4)
				BUTTON["_UICorner4"].Parent = BUTTON["_Button"]

				BUTTON["_UIPadding5"].Name = Library:RandomName()
				BUTTON["_UIPadding5"].PaddingLeft = UDim.new(0, 10)
				BUTTON["_UIPadding5"].Parent = BUTTON["_Title"]

				BUTTON["_Icon2"].Image = "rbxassetid://18757080627"
				BUTTON["_Icon2"].AnchorPoint = Vector2.new(1, 0)
				BUTTON["_Icon2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				BUTTON["_Icon2"].BackgroundTransparency = 1
				BUTTON["_Icon2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				BUTTON["_Icon2"].BorderSizePixel = 0
				BUTTON["_Icon2"].Position = UDim2.new(1, -6, 0.25, -2)
				BUTTON["_Icon2"].Size = UDim2.new(0, 20, 0, 20)
				BUTTON["_Icon2"].Name = Library:RandomName()
				BUTTON["_Icon2"].Parent = BUTTON["_Button1"]

				BUTTON["_Button"].ImageTransparency = 1
				BUTTON["_Button"].BackgroundTransparency = 1
				BUTTON["_Button"].Position = UDim2.new(0, 0, 0, 0)
				BUTTON["_Button"].Size = UDim2.new(1, 0, 1, 0)
				BUTTON["_Button"].Name = Library:RandomName()
				BUTTON["_Button"].Parent = BUTTON["_Button1"]
			end


			--Logic
			do
				BUTTON["_Button"].MouseButton1Click:Connect(function()
					options.callback()
				end)

				BUTTON["_Button1"].MouseEnter:Connect(function()
					BUTTON.Hover = true

					if not BUTTON.MouseDown then
						Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(150, 150, 150)})
					end
				end)

				BUTTON["_Button1"].MouseLeave:Connect(function()
					BUTTON.Hover = false

					if not BUTTON.MouseDown then
						Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(80, 80, 80)})
					end
				end)

				local Connection

				BUTTON["_Button"].MouseButton1Down:Connect(function()
					BUTTON.MouseDown = true
					Library:tween(BUTTON["_Button1"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(200, 200, 200)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and BUTTON.MouseDown then
							BUTTON.MouseDown = false

							if BUTTON.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(BUTTON["_Button1"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(150, 150, 150)})
							else
								Library:tween(BUTTON["_Button1"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(80, 80, 80)})
							end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return BUTTON
		end

		function TAB:CreateLabel(options)
			options = Library:Validate(
				{
					Message = "Label"
				}, options or {})

			local LABEL = {}

			--Render
			do
				LABEL["_Label"] = Instance.new("Frame");
				LABEL["_UICorner4"] = Instance.new("UICorner");
				LABEL["_UIStroke1"] = Instance.new("UIStroke");
				LABEL["_Title1"] = Instance.new("TextLabel");
				LABEL["_UIPadding7"] = Instance.new("UIPadding");
				LABEL["_UICorner8"] = Instance.new("UICorner");
				LABEL["_UIPadding8"] = Instance.new("UIPadding");

				LABEL["_Label"].BackgroundColor3 = Color3.fromRGB(61.00000396370888, 61.00000396370888, 61.00000396370888)
				LABEL["_Label"].BackgroundTransparency = 0.1
				LABEL["_Label"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				LABEL["_Label"].BorderSizePixel = 0
				LABEL["_Label"].Size = UDim2.new(1, 0, 0, 32)
				LABEL["_Label"].Name = Library:RandomName()
				LABEL["_Label"].Parent = TAB["_HomeTab"]

				LABEL["_UICorner4"].Name = Library:RandomName()
				LABEL["_UICorner4"].CornerRadius = UDim.new(0, 4)
				LABEL["_UICorner4"].Parent = LABEL["_Label"]

				LABEL["_UIStroke1"].Name = Library:RandomName()
				LABEL["_UIStroke1"].Color = Color3.fromRGB(161.0000056028366, 161.0000056028366, 161.0000056028366)
				LABEL["_UIStroke1"].Parent = LABEL["_Label"]

				LABEL["_Title1"].Font = Enum.Font.Ubuntu
				LABEL["_Title1"].TextColor3 = Color3.fromRGB(255, 255, 255)
				LABEL["_Title1"].Text = options.Message
				LABEL["_Title1"].TextSize = 20
				LABEL["_Title1"].TextXAlignment = Enum.TextXAlignment.Left
				LABEL["_Title1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				LABEL["_Title1"].BackgroundTransparency = 1
				LABEL["_Title1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				LABEL["_Title1"].BorderSizePixel = 0
				LABEL["_Title1"].Position = UDim2.new(0, 0, 0, 0)
				LABEL["_Title1"].Size = UDim2.new(1, 0, 1, 0)
				LABEL["_Title1"].Name = Library:RandomName()
				LABEL["_Title1"].TextWrapped = true
				LABEL["_Title1"].TextYAlignment = Enum.TextYAlignment.Top
				LABEL["_Title1"].Parent = LABEL["_Label"]

				LABEL["_UIPadding7"].Name = Library:RandomName()
				LABEL["_UIPadding7"].PaddingLeft = UDim.new(0, 5)
				LABEL["_UIPadding7"].PaddingRight = UDim.new(0, 5)
				LABEL["_UIPadding7"].PaddingTop = UDim.new(0, 0)
				LABEL["_UIPadding7"].Parent = LABEL["_Title1"]

				LABEL["_UICorner8"].CornerRadius = UDim.new(0, 4)
				LABEL["_UICorner8"].Name = Library:RandomName()
				LABEL["_UICorner8"].Parent = LABEL["_Title1"]

				LABEL["_UIPadding8"].Name = Library:RandomName()
				LABEL["_UIPadding8"].PaddingBottom = UDim.new(0, 6)
				LABEL["_UIPadding8"].PaddingLeft = UDim.new(0, 6)
				LABEL["_UIPadding8"].PaddingRight = UDim.new(0, 6)
				LABEL["_UIPadding8"].PaddingTop = UDim.new(0, 6)
				LABEL["_UIPadding8"].Parent = LABEL["_Label"]
			end

			--Methods
			function LABEL:SetText(text)
				options.Message = text
				LABEL:_update()
			end

			function LABEL:_update()
				LABEL["_Title1"].Text = options.Message
				--[[
				LABEL["_Title1"].Size = UDim2.new(LABEL["_Title1"].Size.X.Scale, LABEL["_Title1"].Size.X.Offset, 0, math.huge)
				LABEL["_Title1"].Size = UDim2.new(LABEL["_Title1"].Size.X.Scale, LABEL["_Title1"].Size.X.Offset, 0, LABEL["_Title1"].TextBounds.Y)
				LABEL["_Label"].Size = UDim2.new(LABEL["_Label"].Size.X.Scale, LABEL["_Label"].Size.X.Offset, 0, LABEL["_Title1"].TextBounds.Y + 12)
				]]
			end

			if options.Message then
				LABEL:SetText(options.Message)
			end

			return LABEL
		end

		function TAB:CreateSlider(options)
			options = Library:Validate(
				{
					Name = "Slider",
					min = 0,
					max = 100,
					default = 50,
					callback = function() end
				}, options or {})

			local SLIDER = {
				Hover = false,
				MouseDown = false,
				Connection = nil
			}

			--Render
			do
				SLIDER["_Slider"] = Instance.new("Frame");
				SLIDER["_Button"] = Instance.new("ImageButton");
				SLIDER["_UICorner8"] = Instance.new("UICorner");
				SLIDER["_UICorner5"] = Instance.new("UICorner");
				SLIDER["_UIStroke2"] = Instance.new("UIStroke");
				SLIDER["_Title2"] = Instance.new("TextLabel");
				SLIDER["_UIPadding9"] = Instance.new("UIPadding");
				SLIDER["_UIPadding10"] = Instance.new("UIPadding");
				SLIDER["_Value"] = Instance.new("TextLabel");
				SLIDER["_SliderBack"] = Instance.new("Frame");
				SLIDER["_UICorner6"] = Instance.new("UICorner");
				SLIDER["_UIStroke3"] = Instance.new("UIStroke");
				SLIDER["_Draggable"] = Instance.new("Frame");
				SLIDER["_UICorner7"] = Instance.new("UICorner");

				SLIDER["_Slider"].BackgroundColor3 = Color3.fromRGB(10, 10, 10)
				SLIDER["_Slider"].BackgroundTransparency = 0.1
				SLIDER["_Slider"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Slider"].BorderSizePixel = 0
				SLIDER["_Slider"].Size = UDim2.new(1, 0, 0, 45)
				SLIDER["_Slider"].Name = Library:RandomName()
				SLIDER["_Slider"].Parent = TAB["_HomeTab"]

				SLIDER["_UICorner8"].Name = Library:RandomName()
				SLIDER["_UICorner8"].CornerRadius = UDim.new(0, 4)
				SLIDER["_UICorner8"].Parent = SLIDER["_Button"]

				SLIDER["_UICorner5"].Name = Library:RandomName()
				SLIDER["_UICorner5"].CornerRadius = UDim.new(0, 4)
				SLIDER["_UICorner5"].Parent = SLIDER["_Slider"]

				SLIDER["_UIStroke2"].Name = Library:RandomName()
				SLIDER["_UIStroke2"].Color = Color3.fromRGB(80, 80, 80)
				SLIDER["_UIStroke2"].Parent = SLIDER["_Slider"]

				SLIDER["_Title2"].Font = Enum.Font.Ubuntu
				SLIDER["_Title2"].Text = options.Name
				SLIDER["_Title2"].TextColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Title2"].TextSize = 20
				SLIDER["_Title2"].TextXAlignment = Enum.TextXAlignment.Left
				SLIDER["_Title2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Title2"].BackgroundTransparency = 1
				SLIDER["_Title2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Title2"].BorderSizePixel = 0
				SLIDER["_Title2"].Position = UDim2.new(0, 0, 0, 0)
				SLIDER["_Title2"].Size = UDim2.new(1, -40, 1, 0)
				SLIDER["_Title2"].Name = Library:RandomName()
				SLIDER["_Title2"].Parent = SLIDER["_Slider"]

				SLIDER["_UIPadding9"].Name = Library:RandomName()
				SLIDER["_UIPadding9"].PaddingLeft = UDim.new(0, 10)
				SLIDER["_UIPadding9"].PaddingTop = UDim.new(0, -10)
				SLIDER["_UIPadding9"].Parent = SLIDER["_Title2"]

				SLIDER["_Value"].Font = Enum.Font.Ubuntu
				SLIDER["_Value"].Text = "100"
				SLIDER["_Value"].TextColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Value"].TextSize = 20
				SLIDER["_Value"].AnchorPoint = Vector2.new(1, 0)
				SLIDER["_Value"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Value"].BackgroundTransparency = 1
				SLIDER["_Value"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Value"].BorderSizePixel = 0
				SLIDER["_Value"].Position = UDim2.new(1, -12, 0.25, -3)
				SLIDER["_Value"].Size = UDim2.new(0, 20, 0, 20)
				SLIDER["_Value"].Name = Library:RandomName()
				SLIDER["_Value"].Parent = SLIDER["_Slider"]

				SLIDER["_SliderBack"].AnchorPoint = Vector2.new(0, 1)
				SLIDER["_SliderBack"].BackgroundColor3 = Color3.fromRGB(27.000002190470695, 27.000002190470695, 27.000002190470695)
				SLIDER["_SliderBack"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_SliderBack"].BorderSizePixel = 0
				SLIDER["_SliderBack"].Position = UDim2.new(0, 6, 1, -5)
				SLIDER["_SliderBack"].Size = UDim2.new(1, -12, 0, 5)
				SLIDER["_SliderBack"].Name = Library:RandomName()
				SLIDER["_SliderBack"].Parent = SLIDER["_Slider"]

				SLIDER["_UICorner6"].Name = Library:RandomName()
				SLIDER["_UICorner6"].Parent = SLIDER["_SliderBack"]

				SLIDER["_UIStroke3"].Name = Library:RandomName()
				SLIDER["_UIStroke3"].Color = Color3.fromRGB(56, 56, 56)
				SLIDER["_UIStroke3"].Parent = SLIDER["_SliderBack"]

				SLIDER["_Draggable"].BackgroundColor3 = Color3.fromRGB(84, 84, 84)
				SLIDER["_Draggable"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Draggable"].BorderSizePixel = 0
				SLIDER["_Draggable"].Size = UDim2.new(0.5, 0, 1, 0)
				SLIDER["_Draggable"].Name = Library:RandomName()
				SLIDER["_Draggable"].Parent = SLIDER["_SliderBack"]

				SLIDER["_UICorner7"].Name = Library:RandomName()
				SLIDER["_UICorner7"].Parent = SLIDER["_Draggable"]

				SLIDER["_Button"].ImageTransparency = 1
				SLIDER["_Button"].BackgroundTransparency = 1
				SLIDER["_Button"].Position = UDim2.new(0, 0, 0, 0)
				SLIDER["_Button"].Size = UDim2.new(1, 0, 1, 0)
				SLIDER["_Button"].Name = Library:RandomName()
				SLIDER["_Button"].Parent = SLIDER["_Slider"]
			end

			--Methods
			function SLIDER:SetValue(v)
				if v == nil then
					local precentage = math.clamp((mouse.X - SLIDER["_SliderBack"].AbsolutePosition.X) / (SLIDER["_SliderBack"].AbsoluteSize.X), 0, 1)
					local value = math.floor(((options.max - options.min) * precentage) + options.min)

					SLIDER["_Value"].Text = value
					SLIDER["_Draggable"].Size = UDim2.fromScale(precentage, 1)
				else
					SLIDER["_Value"].Text = v
					SLIDER["_Draggable"].Size = UDim2.fromScale(((v - options.min) / (options.max - options.min)), 1)
				end
				options.callback(tonumber(SLIDER["_Value"].Text))
			end

			function SLIDER:GetValue()
				return tonumber(SLIDER["_Value"].Text)
			end

			SLIDER:SetValue(options.default)


			--Logic
			do
				SLIDER["_Button"].MouseButton1Down:Connect(function()
					if not SLIDER.Connection then
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					else
						SLIDER.Connection:Disconnect()
						SLIDER.Connection = nil
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					end
				end)

				SLIDER["_Slider"].MouseEnter:Connect(function()
					SLIDER.Hover = true

					if not SLIDER.MouseDown then
						Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(150, 150, 150)})
						Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(100, 100, 100)})
					end
				end)

				SLIDER["_Slider"].MouseLeave:Connect(function()
					SLIDER.Hover = false

					if not SLIDER.MouseDown then
						Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(80, 80, 80)})
						Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(56, 56, 56)})
					end
				end)

				local Connection

				SLIDER["_Button"].MouseButton1Down:Connect(function()
					SLIDER.MouseDown = true
					Library:tween(SLIDER["_Slider"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(200, 200, 200)})
					Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(200, 200, 200)})
					Library:tween(SLIDER["_Draggable"], {BackgroundColor3 = Color3.fromRGB(200, 200, 200)})

					if not SLIDER.Connection then
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					else
						SLIDER.Connection:Disconnect()
						SLIDER.Connection = nil
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					end

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and SLIDER.MouseDown then
							SLIDER.MouseDown = false

							if SLIDER.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(SLIDER["_Slider"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(150, 150, 150)})
								Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(100, 100, 100)})
								Library:tween(SLIDER["_Draggable"], {BackgroundColor3 = Color3.fromRGB(84, 84, 84)})
							else
								Library:tween(SLIDER["_Slider"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(80, 80, 80)})
								Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(56, 56, 56)})
								Library:tween(SLIDER["_Draggable"], {BackgroundColor3 = Color3.fromRGB(84, 84, 84)})
							end

							options.callback(SLIDER["_Value"].Text)
							if SLIDER.Connection then SLIDER.Connection:Disconnect() SLIDER.Connection = nil end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return SLIDER
		end

		function TAB:CreateToggle(options)
			options = Library:Validate(
				{
					Name = "Toggle",
					default = false,
					callback = function(v) print(v) end
				}, options or {})

			local TOGGLE = {
				Hover = false,
				MouseDown = false,
				state = false
			}

			--Render
			do
				TOGGLE["_ToggleInactive"] = Instance.new("Frame");
				TOGGLE["_Button"] = Instance.new("ImageButton")
				TOGGLE["_UICorner14"] = Instance.new("UICorner");
				TOGGLE["_UIStroke9"] = Instance.new("UIStroke");
				TOGGLE["_Title5"] = Instance.new("TextLabel");
				TOGGLE["_UIPadding15"] = Instance.new("UIPadding");
				TOGGLE["_UIPadding16"] = Instance.new("UIPadding");
				TOGGLE["_CheckmarkHolder1"] = Instance.new("Frame");
				TOGGLE["_UICorner15"] = Instance.new("UICorner");
				TOGGLE["_Checkmark1"] = Instance.new("ImageLabel");

				TOGGLE["_ToggleInactive"].BackgroundColor3 = Color3.fromRGB(10, 10, 10)
				TOGGLE["_ToggleInactive"].BackgroundTransparency = 0.1
				TOGGLE["_ToggleInactive"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_ToggleInactive"].BorderSizePixel = 0
				TOGGLE["_ToggleInactive"].Size = UDim2.new(1, 0, 0, 35)
				TOGGLE["_ToggleInactive"].Name = Library:RandomName()
				TOGGLE["_ToggleInactive"].Parent = TAB["_HomeTab"]

				TOGGLE["_UICorner14"].Name = Library:RandomName()
				TOGGLE["_UICorner14"].CornerRadius = UDim.new(0, 4)
				TOGGLE["_UICorner14"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_UIStroke9"].Name = Library:RandomName()
				TOGGLE["_UIStroke9"].Color = Color3.fromRGB(80, 80, 80)
				TOGGLE["_UIStroke9"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_Title5"].Font = Enum.Font.Ubuntu
				TOGGLE["_Title5"].Text = options.Name
				TOGGLE["_Title5"].TextColor3 = Color3.fromRGB(255, 255, 255)
				TOGGLE["_Title5"].TextSize = 20
				TOGGLE["_Title5"].TextXAlignment = Enum.TextXAlignment.Left
				TOGGLE["_Title5"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TOGGLE["_Title5"].BackgroundTransparency = 1
				TOGGLE["_Title5"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_Title5"].BorderSizePixel = 0
				TOGGLE["_Title5"].Position = UDim2.new(0, 0, 0, 0)
				TOGGLE["_Title5"].Size = UDim2.new(1, -32, 1, 0)
				TOGGLE["_Title5"].Name = Library:RandomName()
				TOGGLE["_Title5"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_UIPadding15"].Name = Library:RandomName()
				TOGGLE["_UIPadding15"].PaddingLeft = UDim.new(0, 10)
				TOGGLE["_UIPadding15"].Parent = TOGGLE["_Title5"]

				TOGGLE["_CheckmarkHolder1"].AnchorPoint = Vector2.new(1, 0)
				TOGGLE["_CheckmarkHolder1"].BackgroundColor3 = Color3.fromRGB(98, 98, 98)
				TOGGLE["_CheckmarkHolder1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_CheckmarkHolder1"].BorderSizePixel = 0
				TOGGLE["_CheckmarkHolder1"].Position = UDim2.new(1, -6, 0.25, -2)
				TOGGLE["_CheckmarkHolder1"].Size = UDim2.new(0, 20, 0, 20)
				TOGGLE["_CheckmarkHolder1"].Name = Library:RandomName()
				TOGGLE["_CheckmarkHolder1"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_UICorner15"].Name = Library:RandomName()
				TOGGLE["_UICorner15"].CornerRadius = UDim.new(0, 4)
				TOGGLE["_UICorner15"].Parent = TOGGLE["_CheckmarkHolder1"]

				TOGGLE["_Checkmark1"].Image = "rbxassetid://18757850793"
				TOGGLE["_Checkmark1"].AnchorPoint = Vector2.new(0.5, 0.5)
				TOGGLE["_Checkmark1"].BackgroundColor3 = Color3.fromRGB(88, 88, 88)
				TOGGLE["_Checkmark1"].BackgroundTransparency = 1
				TOGGLE["_Checkmark1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_Checkmark1"].BorderSizePixel = 0
				TOGGLE["_Checkmark1"].Position = UDim2.new(0.5, 0, 0.5, 0)
				TOGGLE["_Checkmark1"].Size = UDim2.new(1, -2, 1, -2)
				TOGGLE["_Checkmark1"].Visible = true
				TOGGLE["_Checkmark1"].ImageTransparency = 1
				TOGGLE["_Checkmark1"].Name = Library:RandomName()
				TOGGLE["_Checkmark1"].Parent = TOGGLE["_CheckmarkHolder1"]

				TOGGLE["_Button"].ImageTransparency = 1
				TOGGLE["_Button"].BackgroundTransparency = 1
				TOGGLE["_Button"].Position = UDim2.new(0, 0, 0, 0)
				TOGGLE["_Button"].Size = UDim2.new(1, 0, 1, 0)
				TOGGLE["_Button"].Name = Library:RandomName()
				TOGGLE["_Button"].Parent = TOGGLE["_ToggleInactive"]
			end

			--Methods
			function TOGGLE:Toggle(v)
				if v == nil then
					TOGGLE.state = not TOGGLE.state
				else
					TOGGLE.state = v
				end

				if TOGGLE.state then
					Library:tween(TOGGLE["_CheckmarkHolder1"], {BackgroundColor3 = Color3.fromRGB(0, 152, 38)})
					Library:tween(TOGGLE["_Checkmark1"], {ImageTransparency = 0})
				else
					Library:tween(TOGGLE["_CheckmarkHolder1"], {BackgroundColor3 = Color3.fromRGB(98, 98, 98)})
					Library:tween(TOGGLE["_Checkmark1"], {ImageTransparency = 1})
				end

				options.callback(TOGGLE.state)
			end

			function TOGGLE:GetToggle()
				return TOGGLE.state
			end

			TOGGLE:Toggle(options.default)


			--Logic
			do
				TOGGLE["_Button"].MouseButton1Click:Connect(function()
					TOGGLE:Toggle()
				end)

				TOGGLE["_ToggleInactive"].MouseEnter:Connect(function()
					TOGGLE.Hover = true

					if not TOGGLE.MouseDown then
						Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(150, 150, 150)})
					end
				end)

				TOGGLE["_ToggleInactive"].MouseLeave:Connect(function()
					TOGGLE.Hover = false

					if not TOGGLE.MouseDown then
						Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(80, 80, 80)})
					end
				end)

				local Connection

				TOGGLE["_Button"].MouseButton1Down:Connect(function()
					TOGGLE.MouseDown = true
					Library:tween(TOGGLE["_ToggleInactive"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(200, 200, 200)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and TOGGLE.MouseDown then
							TOGGLE.MouseDown = false

							if TOGGLE.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(TOGGLE["_ToggleInactive"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(150, 150, 150)})
							else
								Library:tween(TOGGLE["_ToggleInactive"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(80, 80, 80)})
							end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return TOGGLE
		end

		function TAB:CreateDropdown(options)
			options = Library:Validate(
				{
					Name = "Dropdown",
					options = {},
					callback = function(v) print(v) end
				}, options or {})

			local DROPDOWN = {
				Items = options.options,
				Hover = false,
				MouseDown = false,
				state = false,
				HoveringItem = false
			}

			--Render
			do
				DROPDOWN["_Dropdown"] = Instance.new("Frame");
				DROPDOWN["_Button"] = Instance.new("ImageButton")
				DROPDOWN["_UICorner9"] = Instance.new("UICorner")
				DROPDOWN["_UICorner8"] = Instance.new("UICorner");
				DROPDOWN["_UIStroke4"] = Instance.new("UIStroke");
				DROPDOWN["_Title3"] = Instance.new("TextLabel");
				DROPDOWN["_UIPadding11"] = Instance.new("UIPadding");
				DROPDOWN["_UIPadding12"] = Instance.new("UIPadding");
				DROPDOWN["_Icon3"] = Instance.new("ImageLabel");
				DROPDOWN["_OptionHolder"] = Instance.new("ScrollingFrame");
				DROPDOWN["_UIListLayout2"] = Instance.new("UIListLayout");
				DROPDOWN["_UIPadding13"] = Instance.new("UIPadding");

				DROPDOWN["_Dropdown"].BackgroundColor3 = Color3.fromRGB(10.000000353902578, 10.000000353902578, 10.000000353902578)
				DROPDOWN["_Dropdown"].BackgroundTransparency = 0.10000000149011612
				DROPDOWN["_Dropdown"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_Dropdown"].BorderSizePixel = 0
				DROPDOWN["_Dropdown"].ClipsDescendants = true
				DROPDOWN["_Dropdown"].Size = UDim2.new(1, 0, 0, 35)
				DROPDOWN["_Dropdown"].Name = Library:RandomName()
				DROPDOWN["_Dropdown"].Parent = TAB["_HomeTab"]

				DROPDOWN["_UICorner9"].Name = Library:RandomName()
				DROPDOWN["_UICorner9"].CornerRadius = UDim.new(0, 4)
				DROPDOWN["_UICorner9"].Parent = DROPDOWN["_Button"]

				DROPDOWN["_UICorner8"].Name = Library:RandomName()
				DROPDOWN["_UICorner8"].CornerRadius = UDim.new(0, 4)
				DROPDOWN["_UICorner8"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_UIStroke4"].Name = Library:RandomName()
				DROPDOWN["_UIStroke4"].Color = Color3.fromRGB(80.00000283122063, 80.00000283122063, 80.00000283122063)
				DROPDOWN["_UIStroke4"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_Title3"].Font = Enum.Font.Ubuntu
				DROPDOWN["_Title3"].Text = options.Name
				DROPDOWN["_Title3"].TextColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_Title3"].TextSize = 20
				DROPDOWN["_Title3"].TextXAlignment = Enum.TextXAlignment.Left
				DROPDOWN["_Title3"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_Title3"].BackgroundTransparency = 1
				DROPDOWN["_Title3"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_Title3"].BorderSizePixel = 0
				DROPDOWN["_Title3"].Position = UDim2.new(0, 0, 0, 5.75)
				DROPDOWN["_Title3"].Size = UDim2.new(1, -32, 0, 23)
				DROPDOWN["_Title3"].Name = Library:RandomName()
				DROPDOWN["_Title3"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_UIPadding11"].Name = Library:RandomName()
				DROPDOWN["_UIPadding11"].PaddingLeft = UDim.new(0, 10)
				DROPDOWN["_UIPadding11"].Parent = DROPDOWN["_Title3"]

				DROPDOWN["_Icon3"].Image = "rbxassetid://18757413804"
				DROPDOWN["_Icon3"].AnchorPoint = Vector2.new(1, 0)
				DROPDOWN["_Icon3"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_Icon3"].BackgroundTransparency = 1
				DROPDOWN["_Icon3"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_Icon3"].BorderSizePixel = 0
				DROPDOWN["_Icon3"].Position = UDim2.new(1, -6, 0, 7)
				DROPDOWN["_Icon3"].Size = UDim2.new(0, 20, 0, 20)
				DROPDOWN["_Icon3"].Name = Library:RandomName()
				DROPDOWN["_Icon3"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_OptionHolder"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_OptionHolder"].BackgroundTransparency = 1
				DROPDOWN["_OptionHolder"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_OptionHolder"].BorderSizePixel = 0
				DROPDOWN["_OptionHolder"].Position = UDim2.new(0, 0, 0, 35)
				DROPDOWN["_OptionHolder"].Size = UDim2.new(1, 0, 1, -35)
				DROPDOWN["_OptionHolder"].Visible = false
				DROPDOWN["_OptionHolder"].ClipsDescendants = true
				DROPDOWN["_OptionHolder"].CanvasSize = UDim2.new(0, 0, 0, 0)
				DROPDOWN["_OptionHolder"].Name = Library:RandomName()
				DROPDOWN["_OptionHolder"].ScrollBarThickness = 0
				DROPDOWN["_OptionHolder"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_UIPadding13"].Name = Library:RandomName()
				DROPDOWN["_UIPadding13"].PaddingBottom = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].PaddingLeft = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].PaddingRight = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].PaddingTop = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].Parent = DROPDOWN["_OptionHolder"]

				DROPDOWN["_UIListLayout2"].Name = Library:RandomName()
				DROPDOWN["_UIListLayout2"].Padding = UDim.new(0, 5)
				DROPDOWN["_UIListLayout2"].SortOrder = Enum.SortOrder.LayoutOrder
				DROPDOWN["_UIListLayout2"].Parent = DROPDOWN["_OptionHolder"]

				DROPDOWN["_Button"].ImageTransparency = 1
				DROPDOWN["_Button"].BackgroundTransparency = 1
				DROPDOWN["_Button"].Position = UDim2.new(0, 0, 0, 0)
				DROPDOWN["_Button"].Size = UDim2.new(1, 0, 0, 35)
				DROPDOWN["_Button"].Name = Library:RandomName()
				DROPDOWN["_Button"].Parent = DROPDOWN["_Dropdown"]
			end


			--Methods
			function DROPDOWN:Add(id, value)
				local Item = {
					Hover = false,
					MouseDown = false
				}

				DROPDOWN.Items[id] = {
					instance = {},
					value = value
				}

				DROPDOWN.Items[id].instance["_Inactive1"] = Instance.new("TextLabel");
				DROPDOWN.Items[id].instance["_Button"] = Instance.new("ImageButton");
				DROPDOWN.Items[id].instance["_UICorner10"] = Instance.new("UICorner");
				DROPDOWN.Items[id].instance["_UICorner9"] = Instance.new("UICorner");
				DROPDOWN.Items[id].instance["_UIStroke5"] = Instance.new("UIStroke");

				DROPDOWN.Items[id].instance["_Inactive1"].Font = Enum.Font.Ubuntu
				DROPDOWN.Items[id].instance["_Inactive1"].Text = id
				DROPDOWN.Items[id].instance["_Inactive1"].TextColor3 = Color3.fromRGB(226.00001692771912, 226.00001692771912, 226.00001692771912)
				DROPDOWN.Items[id].instance["_Inactive1"].TextSize = 15
				DROPDOWN.Items[id].instance["_Inactive1"].BackgroundColor3 = Color3.fromRGB(81.00000277161598, 81.00000277161598, 81.00000277161598)
				DROPDOWN.Items[id].instance["_Inactive1"].BackgroundTransparency = 0.5
				DROPDOWN.Items[id].instance["_Inactive1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN.Items[id].instance["_Inactive1"].BorderSizePixel = 0
				DROPDOWN.Items[id].instance["_Inactive1"].Size = UDim2.new(1, 0, 0, 20)
				DROPDOWN.Items[id].instance["_Inactive1"].Name = Library:RandomName()
				DROPDOWN.Items[id].instance["_Inactive1"].Parent = DROPDOWN["_OptionHolder"]

				DROPDOWN.Items[id].instance["_Button"].ImageTransparency = 1
				DROPDOWN.Items[id].instance["_Button"].BackgroundTransparency = 1
				DROPDOWN.Items[id].instance["_Button"].Position = UDim2.new(0, 0, 0, 0)
				DROPDOWN.Items[id].instance["_Button"].Size = UDim2.new(1, 0, 1, 0)
				DROPDOWN.Items[id].instance["_Button"].Name = Library:RandomName()
				DROPDOWN.Items[id].instance["_Button"].Parent = DROPDOWN.Items[id].instance["_Inactive1"]

				DROPDOWN.Items[id].instance["_UICorner10"].Name = Library:RandomName()
				DROPDOWN.Items[id].instance["_UICorner10"].CornerRadius = UDim.new(0, 4)
				DROPDOWN.Items[id].instance["_UICorner10"].Parent = DROPDOWN.Items[id].instance["_Button"]

				DROPDOWN.Items[id].instance["_UICorner9"].CornerRadius = UDim.new(0, 4)
				DROPDOWN.Items[id].instance["_UICorner9"].Parent = DROPDOWN.Items[id].instance["_Inactive1"]

				DROPDOWN.Items[id].instance["_UIStroke5"].ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				DROPDOWN.Items[id].instance["_UIStroke5"].Color = Color3.fromRGB(117, 117, 117)
				DROPDOWN.Items[id].instance["_UIStroke5"].Parent = DROPDOWN.Items[id].instance["_Inactive1"]

				DROPDOWN.Items[id].instance["_Button"].MouseButton1Click:Connect(function()
					options.callback(value)
					DROPDOWN:Toggle()
				end)

				DROPDOWN.Items[id].instance["_Inactive1"].MouseEnter:Connect(function()
					Item.Hover = true
					DROPDOWN.HoveringItem = true

					if not Item.MouseDown then
						Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(255, 255, 255)})
					end
				end)

				DROPDOWN.Items[id].instance["_Inactive1"].MouseLeave:Connect(function()
					Item.Hover = false
					DROPDOWN.HoveringItem = false

					if not Item.MouseDown then
						Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(117, 117, 117)})
					end
				end)

				local Connection

				DROPDOWN.Items[id].instance["_Button"].MouseButton1Down:Connect(function()
					Item.MouseDown = true
					Library:tween(DROPDOWN.Items[id].instance["_Inactive1"], {BackgroundColor3 = Color3.fromRGB(120, 120, 120)})
					Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(255,255,255)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and Item.MouseDown then
							Item.MouseDown = false

							if Item.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(DROPDOWN.Items[id].instance["_Inactive1"], {BackgroundColor3 = Color3.fromRGB(81, 81, 81)})
								Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(25, 255, 255)})
							else
								Library:tween(DROPDOWN.Items[id].instance["_Inactive1"], {BackgroundColor3 = Color3.fromRGB(81, 81, 81)})
								Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(117, 117, 117)})
							end
						end
						if Connection then Connection:Disconnect() Connection = nil end
					end)
				end)
			end

			function DROPDOWN:Remove(id)
				if DROPDOWN.Items[id] ~= nil then
					for i, v in pairs(DROPDOWN.Items[id].instance) do
						v:Destroy()
					end
					DROPDOWN.Items[id] = nil
				end
			end

			function DROPDOWN:Clear()
				for i, v in pairs(DROPDOWN.Items) do
					DROPDOWN:Remove(i)
				end
			end

			function DROPDOWN:Toggle()
				local maxcount = 5
				local count = 0
				for i, v in pairs(DROPDOWN.Items) do
					if v ~= nil then
						count += 1
					end
				end

				if DROPDOWN.state then
					if count <= maxcount then
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset - count * 26))
					else
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset - maxcount * 26))
					end
					DROPDOWN["_OptionHolder"].Visible = false
					Library:tween(DROPDOWN["_Dropdown"], {Size = UDim2.new(1, 0, 0, 35)})
				else
					if count <= maxcount then
						Library:tween(DROPDOWN["_Dropdown"], {Size = UDim2.new(1, 0, 0, 35 + (count * 26))})
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset + count * 26))
					else
						Library:tween(DROPDOWN["_Dropdown"], {Size = UDim2.new(1, 0, 0, 35 + (maxcount * 26))})
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset + maxcount * 26))
					end
					DROPDOWN["_OptionHolder"].Visible = true
					DROPDOWN["_OptionHolder"].CanvasSize = UDim2.new(0, 0, 0, (count *  26))
				end

				DROPDOWN.state = not DROPDOWN.state
			end

			for i, v in pairs(options.options) do
				if v then
					DROPDOWN:Add(i, v)
				end
			end


			--Logic
			do
				DROPDOWN["_Button"].MouseButton1Click:Connect(function()
					if not DROPDOWN.HoveringItem then
						DROPDOWN:Toggle()
					end
				end)

				DROPDOWN["_Dropdown"].MouseEnter:Connect(function()
					DROPDOWN.Hover = true

					if not DROPDOWN.MouseDown then
						Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(150, 150, 150)})
					end
				end)

				DROPDOWN["_Dropdown"].MouseLeave:Connect(function()
					DROPDOWN.Hover = false

					if not DROPDOWN.MouseDown then
						Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(80, 80, 80)})
					end
				end)

				local Connection

				DROPDOWN["_Button"].MouseButton1Down:Connect(function()
					DROPDOWN.MouseDown = true
					Library:tween(DROPDOWN["_Dropdown"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(200, 200, 200)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and DROPDOWN.MouseDown then
							DROPDOWN.MouseDown = false

							if DROPDOWN.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(DROPDOWN["_Dropdown"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(150, 150, 150)})
							else
								Library:tween(DROPDOWN["_Dropdown"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(80, 80, 80)})
							end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return DROPDOWN
		end

		return TAB
	end

	return GUI
end

return Library--Services
local lp = game:GetService("Players").LocalPlayer
local TS = game:GetService("TweenService")
local rs = game:GetService("RunService")
local uis = game:GetService("UserInputService")

--Variables
local mouse = lp:GetMouse()
local viewport = workspace.CurrentCamera.ViewportSize
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

local Library = {}

function Library:Validate(defaults, options)
	for i, v in pairs(defaults) do
		if not options[i] then
			options[i] = v
		end
	end
	return options
end

function Library:tween(obj, goal, callback)
	local tween = TS:Create(obj, tweenInfo, goal)
	tween.Completed:Connect(callback or function() end)
	tween:Play()
	return tween
end

function Library:RandomName()
	local length = math.random(30, 50)
	local name = {}

	for i = 0, length do
		local char = string.char(math.random(0, 255))
		name[i] = char
	end

	return table.concat(name)
end

function Library:Destroy()
	for i, v in pairs(Library) do
		if typeof(v) == "Instance" then
			v:Destroy()
			Library[i] = nil
		else
			Library[i] = nil
		end
	end
end

--Library._UI
Library["_UI"] = Instance.new("ScreenGui");

Library["_UI"].IgnoreGuiInset = true
Library["_UI"].ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets
Library["_UI"].ResetOnSpawn = false
Library["_UI"].Name = Library:RandomName()
Library["_UI"].Parent = rs:IsStudio() and lp:WaitForChild("PlayerGui") or game:GetService("CoreGui")

--Notification
Library["_Notifications"] = Instance.new("Frame");
Library["_UIPadding15"] = Instance.new("UIPadding");
Library["_Notify"] = Instance.new("Frame");
Library["_UICorner21"] = Instance.new("UICorner");
Library["_UIStroke12"] = Instance.new("UIStroke");
Library["_Description"] = Instance.new("TextLabel");
Library["_UIPadding16"] = Instance.new("UIPadding");
Library["_Title7"] = Instance.new("TextLabel");
Library["_UIPadding17"] = Instance.new("UIPadding");

Library["_Notifications"].AnchorPoint = Vector2.new(1, 0)
Library["_Notifications"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Library["_Notifications"].BackgroundTransparency = 1
Library["_Notifications"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Notifications"].BorderSizePixel = 0
Library["_Notifications"].Position = UDim2.new(1, 0, 0, 0)
Library["_Notifications"].Size = UDim2.new(0.238322213, 0, 1, 0)
Library["_Notifications"].Name = Library:RandomName()
Library["_Notifications"].Parent = Library["_UI"]

Library["_UIPadding15"].PaddingBottom = UDim.new(0, 10)
Library["_UIPadding15"].PaddingRight = UDim.new(0, 10)
Library["_UIPadding15"].Name = Library:RandomName()
Library["_UIPadding15"].Parent = Library["_Notifications"]

Library["_Notify"].AnchorPoint = Vector2.new(0.5, 1)
Library["_Notify"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
Library["_Notify"].BackgroundTransparency = 0.5
Library["_Notify"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Notify"].BorderSizePixel = 0
Library["_Notify"].Position = UDim2.new(1.5, 6, 1, 0)
Library["_Notify"].Size = UDim2.new(0.959999979, 0, 0.101214573, 0)
Library["_Notify"].Name = Library:RandomName()
Library["_Notify"].Parent = Library["_UI"]

Library["_UICorner21"].CornerRadius = UDim.new(0, 4)
Library["_UICorner21"].Name = Library:RandomName()
Library["_UICorner21"].Parent = Library["_Notify"]

Library["_UIStroke12"].Color = Color3.fromRGB(40.00000141561031, 40.00000141561031, 40.00000141561031)
Library["_UIStroke12"].Thickness = 3
Library["_UIStroke12"].Name = Library:RandomName()
Library["_UIStroke12"].Parent = Library["_Notify"]

Library["_Description"].Font = Enum.Font.Ubuntu
Library["_Description"].Text = "Description"
Library["_Description"].TextColor3 = Color3.fromRGB(255, 255, 255)
Library["_Description"].TextScaled = true
Library["_Description"].TextSize = 20
Library["_Description"].TextWrapped = true
Library["_Description"].TextXAlignment = Enum.TextXAlignment.Left
Library["_Description"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Library["_Description"].BackgroundTransparency = 1
Library["_Description"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Description"].BorderSizePixel = 0
Library["_Description"].Position = UDim2.new(0, 0, 0.5, 0)
Library["_Description"].Size = UDim2.new(1, 0, 0.5, 0)
Library["_Description"].Name = Library:RandomName()
Library["_Description"].Parent = Library["_Notify"]

Library["_UIPadding16"].PaddingLeft = UDim.new(0, 10)
Library["_UIPadding16"].PaddingBottom = UDim.new(0, 2)
Library["_UIPadding16"].Name = Library:RandomName()
Library["_UIPadding16"].Parent = Library["_Description"]

Library["_Title7"].Font = Enum.Font.Unknown
Library["_Title7"].RichText = true
Library["_Title7"].Text = "<b>Title</b>"
Library["_Title7"].TextColor3 = Color3.fromRGB(255, 255, 255)
Library["_Title7"].TextScaled = true
Library["_Title7"].TextSize = 25
Library["_Title7"].TextWrapped = true
Library["_Title7"].TextXAlignment = Enum.TextXAlignment.Left
Library["_Title7"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Library["_Title7"].BackgroundTransparency = 1
Library["_Title7"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Library["_Title7"].BorderSizePixel = 0
Library["_Title7"].Position = UDim2.new(0, 0, 0, 0)
Library["_Title7"].Size = UDim2.new(1, 0, 0.5, 0)
Library["_Title7"].Name = Library:RandomName()
Library["_Title7"].Parent = Library["_Notify"]

Library["_UIPadding17"].PaddingLeft = UDim.new(0, 10)
Library["_UIPadding17"].PaddingTop = UDim.new(0, 2)
Library["_UIPadding17"].Name = Library:RandomName()
Library["_UIPadding17"].Parent = Library["_Title7"]

local maxNotifications = 5
local notificationPadding = 13

local queuedNotifications = {}

local function NotificationUpTween(notificationFrame: Frame)

	local offsetY = (Library["_Notifications"].AbsoluteSize.Y * notificationFrame.Size.Y.Scale + notificationFrame.Size.Y.Offset) + notificationPadding
	local scaleY = offsetY / Library["_Notifications"].AbsoluteSize.Y
	local newY = notificationFrame.Position.Y.Scale - scaleY

	local goalProperties = {
		Position = UDim2.new(0.5, 0, newY, 0);
	}
	local tween = Library.tween and Library:tween(notificationFrame, goalProperties)
end

local function NotificationInTween(notificationFrame: Frame)

	local goalProperties = {
		Position = UDim2.new(0.5, 0, 1, 0);
	}

	local tween = Library.tween and Library:tween(notificationFrame, goalProperties)

	if tween then tween.Completed:Wait() end
end

local function NotificationOutTween(notificationFrame: Frame)

	notificationFrame.Name = "Removing"

	local goalProperties = {
		Position = UDim2.new(1.5, 6, notificationFrame.Position.Y.Scale, 0);
	}

	local tween = Library.tween and Library:tween(notificationFrame, goalProperties)

	if tween then
		tween.Completed:Wait()

		notificationFrame:Destroy()
	end
end


local function ShiftNotificationsUp()

	local existingNotifications = {}

	for _, child in pairs(Library["_Notifications"]:GetChildren()) do

		if child:IsA("Frame") and child.Name ~= "Removing" then
			table.insert(existingNotifications, child)
		end
	end

	table.sort(existingNotifications, function(a, b)
		return a.AbsolutePosition.Y < b.AbsolutePosition.Y
	end)

	if #existingNotifications >= maxNotifications then

		for i = 1, #existingNotifications - maxNotifications + 1 do

			local existingNotification = existingNotifications[i]
			NotificationOutTween(existingNotification)
		end
	end

	for _, notificationFrame in pairs(existingNotifications) do
		NotificationUpTween(notificationFrame)
	end

	task.wait(tweenInfo.Time)
end


function Library:CreateNotification(options: {Title: string, Description: string, Time: number, SoundId: string | number, Color: Color3})
	options = Library:Validate(
		{
			Title = "Title",
			Description = "Description",
			Time = 8,
			SoundId = "rbxassetid://6026984224",
			Color = Color3.new(255, 255, 255)
		}, options or {})

	table.insert(queuedNotifications, options)

	while table.find(queuedNotifications, options) ~= 1 do
		rs.Heartbeat:Wait()
	end

	local soundObject = Instance.new("Sound")
	soundObject.SoundId = options.SoundId
	soundObject.Parent = script
	soundObject:Play()

	soundObject.Ended:Connect(function()
		soundObject:Destroy()
	end)

	task.wait(0.5)

	ShiftNotificationsUp()

	local notificationFrame = Library["_Notify"]:Clone()
	local title = notificationFrame[Library["_Title7"].Name]
	local descrition = notificationFrame[Library["_Description"].Name]

	notificationFrame.Name = Library:RandomName()
	title.Name = Library:RandomName()
	title.RichText = true
	descrition.Name = Library:RandomName()

	title.Text = "<b>"..options.Title.."</b>"
	title.TextColor3 = options.Color
	descrition.Text = options.Description
	notificationFrame.Parent = Library["_Notifications"]

	task.spawn(NotificationInTween, notificationFrame)

	table.remove(queuedNotifications, 1)

	task.spawn(function()

		task.wait(options.Time)
		NotificationOutTween(notificationFrame)
	end)
end


function Library:Init(options)
	options = Library:Validate(
		{
			Name = "Wayfer Library"
		}, options or {})

	local GUI = {
		CurrentTab = nil
	}


	--Main Frame
	do
		GUI["_Main"] = Instance.new("Frame");
		GUI["_UICorner"] = Instance.new("UICorner");
		GUI["_DropShadowHolder"] = Instance.new("Frame");
		GUI["_DropShadow"] = Instance.new("ImageLabel");
		GUI["_HeadBar"] = Instance.new("Frame");
		GUI["_UICorner1"] = Instance.new("UICorner");
		GUI["_Hide"] = Instance.new("Frame");
		GUI["_Close"] = Instance.new("ImageLabel");
		GUI["_Button"] = Instance.new("ImageButton");
		GUI["_UICorner5"] = Instance.new("UICorner");
		GUI["_UICorner3"] = Instance.new("UICorner");
		GUI["_Minimize"] = Instance.new("ImageLabel");
		GUI["_Button1"] = Instance.new("ImageButton");
		GUI["_UICorner6"] = Instance.new("UICorner");
		GUI["_UICorner7"] = Instance.new("UICorner");
		GUI["_Name"] = Instance.new("TextLabel");
		GUI["_UIPadding"] = Instance.new("UIPadding");
		GUI["_Dragger"] = Instance.new("ImageButton");
		GUI["_UICorner4"] = Instance.new("UICorner");
		GUI["_ContentContainer"] = Instance.new("Frame");

		do
			--Boot Animation
			GUI["_Boot"] = Instance.new("Frame");
			GUI["_Left"] = Instance.new("Frame");
			GUI["_Logo"] = Instance.new("ImageLabel");
			GUI["_Right"] = Instance.new("Frame");
			GUI["_Logo1"] = Instance.new("ImageLabel");

			GUI["_Boot"].AnchorPoint = Vector2.new(0.5, 0.5)
			GUI["_Boot"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Boot"].BackgroundTransparency = 1
			GUI["_Boot"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Boot"].BorderSizePixel = 0
			GUI["_Boot"].Position = UDim2.new(0.5, 0, 0.5, 0)
			GUI["_Boot"].Size = UDim2.new(0, 400, 0, 400)
			GUI["_Boot"].Name = Library:RandomName()
			GUI["_Boot"].Parent = Library["_UI"]

			GUI["_Left"].AnchorPoint = Vector2.new(1, 0.5)
			GUI["_Left"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Left"].BackgroundTransparency = 1
			GUI["_Left"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Left"].BorderSizePixel = 0
			GUI["_Left"].ClipsDescendants = true
			GUI["_Left"].Position = UDim2.new(0.5, 0, 0.5, 0)
			GUI["_Left"].Size = UDim2.new(0, 0, 0, 400)
			GUI["_Left"].Name = Library:RandomName()
			GUI["_Left"].Parent = GUI["_Boot"]

			GUI["_Logo"].Image = "rbxassetid://133601166692855"
			GUI["_Logo"].AnchorPoint = Vector2.new(1, 0.5)
			GUI["_Logo"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Logo"].BackgroundTransparency = 1
			GUI["_Logo"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Logo"].BorderSizePixel = 0
			GUI["_Logo"].Position = UDim2.new(1, 200, 0.5, 0)
			GUI["_Logo"].Size = UDim2.new(0, 400, 0, 400)
			GUI["_Logo"].Name = Library:RandomName()
			GUI["_Logo"].Parent = GUI["_Left"]

			GUI["_Right"].AnchorPoint = Vector2.new(0, 0.5)
			GUI["_Right"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Right"].BackgroundTransparency = 1
			GUI["_Right"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Right"].BorderSizePixel = 0
			GUI["_Right"].ClipsDescendants = true
			GUI["_Right"].Position = UDim2.new(0.5, 0, 0.5, 0)
			GUI["_Right"].Size = UDim2.new(0, 0, 0, 400)
			GUI["_Right"].Name = Library:RandomName()
			GUI["_Right"].Parent = GUI["_Boot"]

			GUI["_Logo1"].Image = "rbxassetid://133601166692855"
			GUI["_Logo1"].AnchorPoint = Vector2.new(0, 0.5)
			GUI["_Logo1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			GUI["_Logo1"].BackgroundTransparency = 1
			GUI["_Logo1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			GUI["_Logo1"].BorderSizePixel = 0
			GUI["_Logo1"].Position = UDim2.new(0, -200, 0.5, 0)
			GUI["_Logo1"].Size = UDim2.new(0, 400, 0, 400)
			GUI["_Logo1"].Name = Library:RandomName()
			GUI["_Logo1"].Parent = GUI["_Right"]


			local tweenL = TS:Create(GUI["_Left"], TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 200, 0, 400)})
			local tweenR = TS:Create(GUI["_Right"], TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 200, 0, 400)})
			tweenL:Play()
			tweenR:Play()
			tweenL.Completed:Wait()
			task.wait(2)
			GUI["_Boot"]:Destroy()
		end

		GUI["_Main"].AnchorPoint = Vector2.new(0, 0)
		GUI["_Main"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
		GUI["_Main"].BackgroundTransparency = 0.5
		GUI["_Main"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Main"].BorderSizePixel = 0
		GUI["_Main"].Size = UDim2.new(0.571, 0, 0.81, 0)
		GUI["_Main"].Position = UDim2.fromOffset((viewport.X / 2) - ((GUI["_Main"].Size.X.Scale * viewport.X) / 2), (viewport.Y / 2) - ((GUI["_Main"].Size.Y.Scale * viewport.Y) / 2))
		GUI["_Main"].Name = Library:RandomName()
		GUI["_Main"].Parent = Library["_UI"]

		GUI["_UICorner"].Name = Library:RandomName()
		GUI["_UICorner"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner"].Parent = GUI["_Main"]

		GUI["_DropShadowHolder"].BackgroundTransparency = 1
		GUI["_DropShadowHolder"].BorderSizePixel = 0
		GUI["_DropShadowHolder"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_DropShadowHolder"].ZIndex = 0
		GUI["_DropShadowHolder"].Name = Library:RandomName()
		GUI["_DropShadowHolder"].Parent = GUI["_Main"]

		GUI["_DropShadow"].Image = "rbxassetid://6014261993"
		GUI["_DropShadow"].ImageColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_DropShadow"].ImageTransparency = 0.5
		GUI["_DropShadow"].ScaleType = Enum.ScaleType.Slice
		GUI["_DropShadow"].SliceCenter = Rect.new(49, 49, 450, 450)
		GUI["_DropShadow"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_DropShadow"].BackgroundTransparency = 1
		GUI["_DropShadow"].BorderSizePixel = 0
		GUI["_DropShadow"].Position = UDim2.new(0.5, 0, 0.5, 0)
		GUI["_DropShadow"].Size = UDim2.new(1, 47, 1, 47)
		GUI["_DropShadow"].ZIndex = 0
		GUI["_DropShadow"].Name = Library:RandomName()
		GUI["_DropShadow"].Parent = GUI["_DropShadowHolder"]

		GUI["_HeadBar"].BackgroundColor3 = Color3.fromRGB(30.00000201165676, 30.00000201165676, 30.00000201165676)
		GUI["_HeadBar"].BackgroundTransparency = 0.5
		GUI["_HeadBar"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_HeadBar"].BorderSizePixel = 0
		GUI["_HeadBar"].Size = UDim2.new(1, 0, 0, 30)
		GUI["_HeadBar"].Name = Library:RandomName()
		GUI["_HeadBar"].Parent = GUI["_Main"]

		GUI["_UICorner1"].Name = Library:RandomName()
		GUI["_UICorner1"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner1"].Parent = GUI["_HeadBar"]

		GUI["_Hide"].AnchorPoint = Vector2.new(0, 1)
		GUI["_Hide"].BackgroundColor3 = Color3.fromRGB(30.00000011175871, 30.00000011175871, 30.00000011175871)
		GUI["_Hide"].BackgroundTransparency = 0.5
		GUI["_Hide"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Hide"].BorderSizePixel = 0
		GUI["_Hide"].Position = UDim2.new(0, 0, 1, 0)
		GUI["_Hide"].Size = UDim2.new(1, 0, 0.1, 0)
		GUI["_Hide"].Name = Library:RandomName()
		GUI["_Hide"].Parent = GUI["_HeadBar"]

		GUI["_Close"].Image = "rbxassetid://18756175936"
		GUI["_Close"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Close"].BackgroundColor3 = Color3.fromRGB(163, 5, 5)
		GUI["_Close"].BackgroundTransparency = 1
		GUI["_Close"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Close"].BorderSizePixel = 0
		GUI["_Close"].Position = UDim2.new(1, -20, 1, -15)
		GUI["_Close"].Size = UDim2.new(0, 20, 0, 20)
		GUI["_Close"].ZIndex = 2
		GUI["_Close"].Name = Library:RandomName()
		GUI["_Close"].Parent = GUI["_HeadBar"]

		GUI["_Button"].ImageTransparency = 1
		GUI["_Button"].BackgroundTransparency = 1
		GUI["_Button"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Button"].Position = UDim2.new(0.5, 0, 0.5, 0)
		GUI["_Button"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_Button"].Name = Library:RandomName()
		GUI["_Button"].Parent = GUI["_Close"]

		GUI["_UICorner5"].Name = Library:RandomName()
		GUI["_UICorner5"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner5"].Parent = GUI["_Button"]

		GUI["_UICorner3"].Name = Library:RandomName()
		GUI["_UICorner3"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner3"].Parent = GUI["_Close"]

		GUI["_Minimize"].Image = "rbxassetid://18756204039"
		GUI["_Minimize"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Minimize"].BackgroundColor3 = Color3.fromRGB(122, 122, 122)
		GUI["_Minimize"].BackgroundTransparency = 1
		GUI["_Minimize"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Minimize"].BorderSizePixel = 0
		GUI["_Minimize"].Position = UDim2.new(1, -50, 1, -15)
		GUI["_Minimize"].Size = UDim2.new(0, 20, 0, 20)
		GUI["_Minimize"].ZIndex = 2
		GUI["_Minimize"].Name = Library:RandomName()
		GUI["_Minimize"].Parent = GUI["_HeadBar"]

		GUI["_Button1"].ImageTransparency = 1
		GUI["_Button1"].BackgroundTransparency = 1
		GUI["_Button1"].AnchorPoint = Vector2.new(0.5, 0.5)
		GUI["_Button1"].Position = UDim2.new(0.5, 0, 0.5, 0)
		GUI["_Button1"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_Button1"].Name = Library:RandomName()
		GUI["_Button1"].Parent = GUI["_Minimize"]

		GUI["_UICorner6"].Name = Library:RandomName()
		GUI["_UICorner6"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner6"].Parent = GUI["_Button1"]

		GUI["_UICorner7"].Name = Library:RandomName()
		GUI["_UICorner7"].CornerRadius = UDim.new(0, 4)
		GUI["_UICorner7"].Parent = GUI["_Minimize"]

		GUI["_UIPadding"].Name = Library:RandomName()
		GUI["_UIPadding"].PaddingLeft = UDim.new(0, 8)
		GUI["_UIPadding"].PaddingTop = UDim.new(0, -4)
		GUI["_UIPadding"].Parent = GUI["_Name"]

		GUI["_Name"].Font = Enum.Font.Ubuntu
		GUI["_Name"].Text = options.Name
		GUI["_Name"].TextColor3 = Color3.fromRGB(255, 255, 255)
		GUI["_Name"].TextSize = 20
		GUI["_Name"].TextWrapped = false
		GUI["_Name"].TextXAlignment = Enum.TextXAlignment.Left
		GUI["_Name"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		GUI["_Name"].BackgroundTransparency = 1
		GUI["_Name"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Name"].BorderSizePixel = 0
		GUI["_Name"].Position = UDim2.new(0, 0, 0, 1)
		GUI["_Name"].Size = UDim2.new(0.5, 0, 1, -2)
		GUI["_Name"].Name = Library:RandomName()
		GUI["_Name"].Parent = GUI["_HeadBar"]
		GUI["_Name"].Size = UDim2.new(0, GUI["_Name"].TextBounds.X + GUI["_UIPadding"].PaddingLeft.Offset, 1, 0)

		GUI["_Dragger"].Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
		GUI["_Dragger"].ImageTransparency = 1
		GUI["_Dragger"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		GUI["_Dragger"].BackgroundTransparency = 1
		GUI["_Dragger"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Dragger"].BorderSizePixel = 0
		GUI["_Dragger"].Size = UDim2.new(1, -60, 1, 0)
		GUI["_Dragger"].Name = Library:RandomName()
		GUI["_Dragger"].Parent = GUI["_HeadBar"]

		GUI["_UICorner4"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner4"].Name = Library:RandomName()
		GUI["_UICorner4"].Parent = GUI["_Dragger"]

		GUI["_ContentContainer"].AnchorPoint = Vector2.new(1, 0)
		GUI["_ContentContainer"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
		GUI["_ContentContainer"].BackgroundTransparency = 1
		GUI["_ContentContainer"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_ContentContainer"].BorderSizePixel = 0
		GUI["_ContentContainer"].ClipsDescendants = true
		GUI["_ContentContainer"].Position = UDim2.new(1, -6, 0, 36)
		GUI["_ContentContainer"].Size = UDim2.new(0.647, 0, 1, -42)
		GUI["_ContentContainer"].Name = Library:RandomName()
		GUI["_ContentContainer"].Parent = GUI["_Main"]
	end

	--Navigation Frame
	do
		GUI["_Navigation"] = Instance.new("Frame");
		GUI["_UICorner2"] = Instance.new("UICorner");
		GUI["_Hide1"] = Instance.new("Frame");
		GUI["_Hide2"] = Instance.new("Frame");
		GUI["_ButtonHolder"] = Instance.new("ScrollingFrame");
		GUI["_UIListLayout"] = Instance.new("UIListLayout");
		GUI["_UIPadding1"] = Instance.new("UIPadding");

		GUI["_Navigation"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_Navigation"].BackgroundTransparency = 0.5
		GUI["_Navigation"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Navigation"].BorderSizePixel = 0
		GUI["_Navigation"].Position = UDim2.new(0, 0, 0, 30)
		GUI["_Navigation"].Size = UDim2.new(0.333, 0, 1, -30)
		GUI["_Navigation"].Name = Library:RandomName()
		GUI["_Navigation"].Parent = GUI["_Main"]

		GUI["_UICorner2"].Name = Library:RandomName()
		GUI["_UICorner2"].CornerRadius = UDim.new(0, 6)
		GUI["_UICorner2"].Parent = GUI["_Navigation"]

		GUI["_Hide1"].AnchorPoint = Vector2.new(1, 0)
		GUI["_Hide1"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_Hide1"].BackgroundTransparency = 0.5
		GUI["_Hide1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Hide1"].BorderSizePixel = 0
		GUI["_Hide1"].Position = UDim2.new(1, 0, 0, 0)
		GUI["_Hide1"].Size = UDim2.new(0, 3, 1, 0)
		GUI["_Hide1"].Name = Library:RandomName()
		GUI["_Hide1"].Parent = GUI["_Navigation"]

		GUI["_Hide2"].AnchorPoint = Vector2.new(0, 1)
		GUI["_Hide2"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_Hide2"].BackgroundTransparency = 0.5
		GUI["_Hide2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_Hide2"].BorderSizePixel = 0
		GUI["_Hide2"].Position = UDim2.new(0, 0, 0, 3)
		GUI["_Hide2"].Size = UDim2.new(1, 0, 0, 4)
		GUI["_Hide2"].Name = Library:RandomName()
		GUI["_Hide2"].Parent = GUI["_Navigation"]

		GUI["_ButtonHolder"].BackgroundColor3 = Color3.fromRGB(22.000000588595867, 22.000000588595867, 22.000000588595867)
		GUI["_ButtonHolder"].BackgroundTransparency = 0.5
		GUI["_ButtonHolder"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		GUI["_ButtonHolder"].BorderSizePixel = 0
		GUI["_ButtonHolder"].ScrollBarThickness = 0
		GUI["_ButtonHolder"].CanvasSize = UDim2.new(0, 0, 0, 0)
		GUI["_ButtonHolder"].Size = UDim2.new(1, 0, 1, 0)
		GUI["_ButtonHolder"].Name = Library:RandomName()
		GUI["_ButtonHolder"].Parent = GUI["_Navigation"]

		GUI["_UIListLayout"].Name = Library:RandomName()
		GUI["_UIListLayout"].Padding = UDim.new(0, 1)
		GUI["_UIListLayout"].SortOrder = Enum.SortOrder.LayoutOrder
		GUI["_UIListLayout"].Parent = GUI["_ButtonHolder"]

		GUI["_UIPadding1"].Name = Library:RandomName()
		GUI["_UIPadding1"].PaddingBottom = UDim.new(0, 8)
		GUI["_UIPadding1"].PaddingTop = UDim.new(0, 8)
		GUI["_UIPadding1"].PaddingLeft = UDim.new(0, 6)
		GUI["_UIPadding1"].PaddingRight = UDim.new(0, 3)
		GUI["_UIPadding1"].Parent = GUI["_ButtonHolder"]
	end

	--Logic
	do
		local dragToggle
		local dragStart
		local startPos

		local closeB = {
			Hover = false,
			MouseDown = false
		}

		local minimizeB = {
			Hover = false,
			MouseDown = false,
			state = true
		}

		--Drag Logic
		local function updateInput(input)
			local delta = input.Position - dragStart
			local position = UDim2.new(startPos.X.Scale, math.clamp(startPos.X.Offset + delta.X, 0, viewport.X - GUI["_Main"].AbsoluteSize.X), startPos.Y.Scale, math.clamp(startPos.Y.Offset + delta.Y, 0, viewport.Y - GUI["_Main"].AbsoluteSize.Y))
			GUI["_Main"].Position = position
		end

		local Connection


		GUI["_Dragger"].MouseButton1Down:Connect(function()
			if (not closeB.MouseDown and not closeB.Hover) and (not minimizeB.MouseDown and not minimizeB.Hover) then
				dragToggle = true
				dragStart = Vector3.new(mouse.X, mouse.Y, 0)
				startPos = GUI["_Main"].Position

				Connection = uis.InputEnded:Connect(function(input, gpe)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and dragToggle then
						dragToggle = false
						if Connection then Connection:Disconnect() Connection = nil end
					end
				end)
			end
		end)
		
		uis.TouchMoved:Connect(function(input)
			if dragToggle then
				updateInput(input)
			end
		end)

		uis.InputChanged:Connect(function(input)
			if dragToggle then
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					updateInput(input)
				end
			end
		end)


		--Close Logic
		GUI["_Button"].MouseButton1Click:Connect(function()
			for i, v in pairs(GUI) do
				if typeof(v) == "Instance" then
					v:Destroy()
					GUI[i] = nil
				else
					GUI[i] = nil
				end
			end
		end)

		GUI["_Close"].MouseEnter:Connect(function()
			closeB.Hover = true

			if not closeB.MouseDown then
				Library:tween(GUI["_Close"], {BackgroundTransparency = 0.5})
			end
		end)

		GUI["_Close"].MouseLeave:Connect(function()
			closeB.Hover = false

			if not closeB.MouseDown then
				Library:tween(GUI["_Close"], {BackgroundTransparency = 1})
			end
		end)

		local Connection

		GUI["_Button"].MouseButton1Down:Connect(function()
			closeB.MouseDown = true
			Library:tween(GUI["_Close"], {BackgroundTransparency = 0})

			Connection = uis.InputEnded:Connect(function(input, gpe)
				if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and closeB.MouseDown then
					closeB.MouseDown = false
					if GUI["_Close"] then
						if closeB.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
							Library:tween(GUI["_Close"], {BackgroundTransparency = 0.5})
						else
							Library:tween(GUI["_Close"], {BackgroundTransparency = 1})
						end
					end
					if Connection then Connection:Disconnect() Connection = nil end
				end
			end)
		end)

		--Minimize Logic
		GUI["_Button1"].MouseButton1Click:Connect(function()
			if minimizeB.state then
				Library:tween(GUI["_Main"], {Size = UDim2.new(0, GUI["_Name"].AbsoluteSize.X + (GUI["_Minimize"].AbsoluteSize.X + GUI["_Close"].AbsoluteSize.X + 30), 0, GUI["_Name"].AbsoluteSize.Y)})
				GUI["_Minimize"].Image = "rbxassetid://18820269724"
				GUI["_DropShadow"].Size = UDim2.new(1, 31, 1, 31)
				GUI["_ContentContainer"].Visible = false
				GUI["_Navigation"].Visible = false
				GUI["_Hide"].Visible = false
			else
				Library:tween(GUI["_Main"], {Size = UDim2.new(0.571, 0, 0.81, 0)})
				GUI["_Minimize"].Image = "rbxassetid://18756204039"
				GUI["_DropShadow"].Size = UDim2.new(1, 47, 1, 47)
				GUI["_ContentContainer"].Visible = true
				GUI["_Navigation"].Visible = true
				GUI["_Hide"].Visible = true
			end
			Library:tween(GUI["_Minimize"], {BackgroundTransparency = 1})
			minimizeB.state = not minimizeB.state
		end)

		GUI["_Minimize"].MouseEnter:Connect(function()
			minimizeB.Hover = true

			if not minimizeB.MouseDown then
				Library:tween(GUI["_Minimize"], {BackgroundTransparency = 0.5})
			end
		end)

		GUI["_Minimize"].MouseLeave:Connect(function()
			minimizeB.Hover = false

			if not minimizeB.MouseDown then
				Library:tween(GUI["_Minimize"], {BackgroundTransparency = 1})
			end
		end)

		local Connection

		GUI["_Button1"].MouseButton1Down:Connect(function()
			minimizeB.MouseDown = true
			Library:tween(GUI["_Minimize"], {BackgroundTransparency = 0})

			Connection = uis.InputEnded:Connect(function(input, gpe)
				if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and minimizeB.MouseDown then
					minimizeB.MouseDown = false

					if minimizeB.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
						Library:tween(GUI["_Minimize"], {BackgroundTransparency = 0.5})
					else
						Library:tween(GUI["_Minimize"], {BackgroundTransparency = 1})
					end
					if Connection then Connection:Disconnect() Connection = nil end
				end
			end)
		end)
	end

	function GUI:CreateTab(options)
		options = Library:Validate(
			{
				Name = "Tab",
				Icon = "rbxassetid://18756559825"
			}, options or {})

		local TAB = {
			Hover = false,
			Active = false,
			MouseDown = false
		}

		--Render
		do
			TAB["_Inactive"] = Instance.new("TextLabel");
			TAB["_UICorner"] = Instance.new("UICorner");
			TAB["_Button"] = Instance.new("ImageButton");
			TAB["_UIPadding3"] = Instance.new("UIPadding");
			TAB["_Icon1"] = Instance.new("ImageLabel");
			TAB["_HomeTab"] = Instance.new("ScrollingFrame");
			TAB["_UIPadding4"] = Instance.new("UIPadding");
			TAB["_UIListLayout1"] = Instance.new("UIListLayout");


			TAB["_Inactive"].Font = Enum.Font.Ubuntu
			TAB["_Inactive"].Text = options.Name
			TAB["_Inactive"].TextColor3 = Color3.fromRGB(200, 200, 200)
			TAB["_Inactive"].TextSize = 20
			TAB["_Inactive"].TextXAlignment = Enum.TextXAlignment.Left
			TAB["_Inactive"].BackgroundColor3 = Color3.fromRGB(86.00000247359276, 86.00000247359276, 86.00000247359276)
			TAB["_Inactive"].BackgroundTransparency = 1
			TAB["_Inactive"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			TAB["_Inactive"].BorderSizePixel = 0
			TAB["_Inactive"].Size = UDim2.new(1, -3, 0, 30)
			TAB["_Inactive"].Name = Library:RandomName()
			TAB["_Inactive"].Parent = GUI["_ButtonHolder"]
			
			TAB["_UICorner"].CornerRadius = UDim.new(0, 4)
			TAB["_UICorner"].Name = Library:RandomName()
			TAB["_UICorner"].Parent = TAB["_Inactive"]

			TAB["_UIPadding3"].Name = Library:RandomName()
			TAB["_UIPadding3"].PaddingLeft = UDim.new(0, 35)
			TAB["_UIPadding3"].Parent = TAB["_Inactive"]

			TAB["_Icon1"].Image = options.Icon
			TAB["_Icon1"].BackgroundColor3 = Color3.fromRGB(153.00000607967377, 153.00000607967377, 153.00000607967377)
			TAB["_Icon1"].BackgroundTransparency = 1
			TAB["_Icon1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			TAB["_Icon1"].BorderSizePixel = 0
			TAB["_Icon1"].Position = UDim2.new(0, -30, 0, 5)
			TAB["_Icon1"].Size = UDim2.new(0, 20, 0, 20)
			TAB["_Icon1"].Name = Library:RandomName()
			TAB["_Icon1"].ImageColor3 = Color3.fromRGB(200, 200, 200)
			TAB["_Icon1"].Parent = TAB["_Inactive"]

			TAB["_Button"].ImageTransparency = 1
			TAB["_Button"].BackgroundTransparency = 1
			TAB["_Button"].Position = UDim2.new(0, -35, 0, 0)
			TAB["_Button"].Size = UDim2.new(1, 35, 1, 0)
			TAB["_Button"].Name = Library:RandomName()
			TAB["_Button"].Parent = TAB["_Inactive"]

			TAB["_HomeTab"].ScrollBarImageTransparency = 1
			TAB["_HomeTab"].BackgroundColor3 = Color3.fromRGB(36.00000165402889, 36.00000165402889, 36.00000165402889)
			TAB["_HomeTab"].BackgroundTransparency = 1
			TAB["_HomeTab"].BorderColor3 = Color3.fromRGB(0, 0, 0)
			TAB["_HomeTab"].BorderSizePixel = 0
			TAB["_HomeTab"].ClipsDescendants = false
			TAB["_HomeTab"].Selectable = false
			TAB["_HomeTab"].Size = UDim2.new(1, 0, 1, 0)
			TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, 1)
			TAB["_HomeTab"].ScrollBarThickness = 0
			TAB["_HomeTab"].Name = Library:RandomName()
			TAB["_HomeTab"].Visible = false
			TAB["_HomeTab"].Parent = GUI["_ContentContainer"]

			TAB["_UIPadding4"].Name = Library:RandomName()
			TAB["_UIPadding4"].PaddingBottom = UDim.new(0, 1)
			TAB["_UIPadding4"].PaddingLeft = UDim.new(0, 1)
			TAB["_UIPadding4"].PaddingRight = UDim.new(0, 1)
			TAB["_UIPadding4"].PaddingTop = UDim.new(0, 1)
			TAB["_UIPadding4"].Parent = TAB["_HomeTab"]

			TAB["_UIListLayout1"].Name = Library:RandomName()
			TAB["_UIListLayout1"].Padding = UDim.new(0, 6)
			TAB["_UIListLayout1"].SortOrder = Enum.SortOrder.LayoutOrder
			TAB["_UIListLayout1"].Parent = TAB["_HomeTab"]
		end

		--Methodes
		function TAB:Activate()
			if not TAB.Active then
				if GUI.CurrentTab then
					GUI.CurrentTab:Deactivate()
				end

				TAB.Active = true
				Library:tween(TAB["_Inactive"], {BackgroundTransparency = .8})
				Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
				Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
				TAB["_HomeTab"].Visible = true

				GUI.CurrentTab = TAB
			end
		end

		function TAB:Deactivate()
			if TAB.Active then
				TAB.Active = false
				TAB.Hover = false
				Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
				Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
				Library:tween(TAB["_Inactive"], {BackgroundTransparency = 1})
				TAB["_HomeTab"].Visible = false
			end
		end

		function TAB:ResizeNavigation()
			local count = 0
			for i, v in pairs(GUI["_ButtonHolder"]:GetChildren()) do
				if v:IsA("TextLabel") then
					count += 1
				end
			end

			GUI["_ButtonHolder"].CanvasSize = UDim2.new(0, 0, 0, (32 * count))
		end

		TAB:ResizeNavigation()

		function TAB.ResizeContents(content)
			if content:IsA("Frame") then
				TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset + content.AbsoluteSize.Y) + 6)
			end
		end

		TAB["_HomeTab"].ChildAdded:Connect(TAB.ResizeContents)

		--Logic
		do
			TAB["_Button"].MouseButton1Click:Connect(function()
				TAB:Activate()
			end)

			TAB["_Inactive"].MouseEnter:Connect(function()
				if not TAB.Active then
					TAB.Hover = true

					if not TAB.Active then
						Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
						Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
					end
				end
			end)

			TAB["_Inactive"].MouseLeave:Connect(function()
				if not TAB.Active then
					TAB.Hover = false

					Library:tween(TAB["_Inactive"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
					Library:tween(TAB["_Icon1"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
				end
			end)

			local Connection

			TAB["_Button"].MouseButton1Down:Connect(function()
				TAB.MouseDown = true

				Connection = uis.InputEnded:Connect(function(input, gpe)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and TAB.MouseDown then
						TAB.MouseDown = false
						if Connection then Connection:Disconnect() Connection = nil end
					end
				end)
			end)

			if not GUI.CurrentTab then
				TAB:Activate()
			end
		end

		function TAB:CreateButton(options)
			options = Library:Validate(
				{
					Name = "Button",
					callback = function() end
				}, options or {})

			local BUTTON  = {
				Hover = false,
				MouseDown = false
			}

			--Render
			do
				BUTTON["_Button1"] = Instance.new("Frame");
				BUTTON["_UICorner3"] = Instance.new("UICorner");
				BUTTON["_UIStroke"] = Instance.new("UIStroke");
				BUTTON["_Title"] = Instance.new("TextLabel");
				BUTTON["_Button"] = Instance.new("ImageButton");
				BUTTON["_UICorner4"] = Instance.new("UICorner");
				BUTTON["_UIPadding5"] = Instance.new("UIPadding");
				BUTTON["_UIPadding6"] = Instance.new("UIPadding");
				BUTTON["_Icon2"] = Instance.new("ImageLabel");

				BUTTON["_Button1"].BackgroundColor3 = Color3.fromRGB(10, 10, 10)
				BUTTON["_Button1"].BackgroundTransparency = 0.1
				BUTTON["_Button1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				BUTTON["_Button1"].BorderSizePixel = 0
				BUTTON["_Button1"].Size = UDim2.new(1, 0, 0, 35)
				BUTTON["_Button1"].Name = Library:RandomName()
				BUTTON["_Button1"].Parent = TAB["_HomeTab"]

				BUTTON["_UICorner3"].Name = Library:RandomName()
				BUTTON["_UICorner3"].CornerRadius = UDim.new(0, 4)
				BUTTON["_UICorner3"].Parent = BUTTON["_Button1"]

				BUTTON["_UIStroke"].Name = Library:RandomName()
				BUTTON["_UIStroke"].Color = Color3.fromRGB(80, 80, 80)
				BUTTON["_UIStroke"].Parent = BUTTON["_Button1"]

				BUTTON["_Title"].Font = Enum.Font.Ubuntu
				BUTTON["_Title"].Text = options.Name
				BUTTON["_Title"].TextColor3 = Color3.fromRGB(255, 255, 255)
				BUTTON["_Title"].TextSize = 20
				BUTTON["_Title"].TextXAlignment = Enum.TextXAlignment.Left
				BUTTON["_Title"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				BUTTON["_Title"].BackgroundTransparency = 1
				BUTTON["_Title"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				BUTTON["_Title"].BorderSizePixel = 0
				BUTTON["_Title"].Position = UDim2.new(0, 0, 0, 0)
				BUTTON["_Title"].Size = UDim2.new(1, -32, 1, 0)
				BUTTON["_Title"].Name = Library:RandomName()
				BUTTON["_Title"].Parent = BUTTON["_Button1"]

				BUTTON["_UICorner4"].Name = Library:RandomName()
				BUTTON["_UICorner4"].CornerRadius = UDim.new(0, 4)
				BUTTON["_UICorner4"].Parent = BUTTON["_Button"]

				BUTTON["_UIPadding5"].Name = Library:RandomName()
				BUTTON["_UIPadding5"].PaddingLeft = UDim.new(0, 10)
				BUTTON["_UIPadding5"].Parent = BUTTON["_Title"]

				BUTTON["_Icon2"].Image = "rbxassetid://18757080627"
				BUTTON["_Icon2"].AnchorPoint = Vector2.new(1, 0)
				BUTTON["_Icon2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				BUTTON["_Icon2"].BackgroundTransparency = 1
				BUTTON["_Icon2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				BUTTON["_Icon2"].BorderSizePixel = 0
				BUTTON["_Icon2"].Position = UDim2.new(1, -6, 0.25, -2)
				BUTTON["_Icon2"].Size = UDim2.new(0, 20, 0, 20)
				BUTTON["_Icon2"].Name = Library:RandomName()
				BUTTON["_Icon2"].Parent = BUTTON["_Button1"]

				BUTTON["_Button"].ImageTransparency = 1
				BUTTON["_Button"].BackgroundTransparency = 1
				BUTTON["_Button"].Position = UDim2.new(0, 0, 0, 0)
				BUTTON["_Button"].Size = UDim2.new(1, 0, 1, 0)
				BUTTON["_Button"].Name = Library:RandomName()
				BUTTON["_Button"].Parent = BUTTON["_Button1"]
			end


			--Logic
			do
				BUTTON["_Button"].MouseButton1Click:Connect(function()
					options.callback()
				end)

				BUTTON["_Button1"].MouseEnter:Connect(function()
					BUTTON.Hover = true

					if not BUTTON.MouseDown then
						Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(150, 150, 150)})
					end
				end)

				BUTTON["_Button1"].MouseLeave:Connect(function()
					BUTTON.Hover = false

					if not BUTTON.MouseDown then
						Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(80, 80, 80)})
					end
				end)

				local Connection

				BUTTON["_Button"].MouseButton1Down:Connect(function()
					BUTTON.MouseDown = true
					Library:tween(BUTTON["_Button1"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(200, 200, 200)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and BUTTON.MouseDown then
							BUTTON.MouseDown = false

							if BUTTON.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(BUTTON["_Button1"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(150, 150, 150)})
							else
								Library:tween(BUTTON["_Button1"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(BUTTON["_UIStroke"], {Color = Color3.fromRGB(80, 80, 80)})
							end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return BUTTON
		end

		function TAB:CreateLabel(options)
			options = Library:Validate(
				{
					Message = "Label"
				}, options or {})

			local LABEL = {}

			--Render
			do
				LABEL["_Label"] = Instance.new("Frame");
				LABEL["_UICorner4"] = Instance.new("UICorner");
				LABEL["_UIStroke1"] = Instance.new("UIStroke");
				LABEL["_Title1"] = Instance.new("TextLabel");
				LABEL["_UIPadding7"] = Instance.new("UIPadding");
				LABEL["_UICorner8"] = Instance.new("UICorner");
				LABEL["_UIPadding8"] = Instance.new("UIPadding");

				LABEL["_Label"].BackgroundColor3 = Color3.fromRGB(61.00000396370888, 61.00000396370888, 61.00000396370888)
				LABEL["_Label"].BackgroundTransparency = 0.1
				LABEL["_Label"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				LABEL["_Label"].BorderSizePixel = 0
				LABEL["_Label"].Size = UDim2.new(1, 0, 0, 32)
				LABEL["_Label"].Name = Library:RandomName()
				LABEL["_Label"].Parent = TAB["_HomeTab"]

				LABEL["_UICorner4"].Name = Library:RandomName()
				LABEL["_UICorner4"].CornerRadius = UDim.new(0, 4)
				LABEL["_UICorner4"].Parent = LABEL["_Label"]

				LABEL["_UIStroke1"].Name = Library:RandomName()
				LABEL["_UIStroke1"].Color = Color3.fromRGB(161.0000056028366, 161.0000056028366, 161.0000056028366)
				LABEL["_UIStroke1"].Parent = LABEL["_Label"]

				LABEL["_Title1"].Font = Enum.Font.Ubuntu
				LABEL["_Title1"].TextColor3 = Color3.fromRGB(255, 255, 255)
				LABEL["_Title1"].Text = options.Message
				LABEL["_Title1"].TextSize = 20
				LABEL["_Title1"].TextXAlignment = Enum.TextXAlignment.Left
				LABEL["_Title1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				LABEL["_Title1"].BackgroundTransparency = 1
				LABEL["_Title1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				LABEL["_Title1"].BorderSizePixel = 0
				LABEL["_Title1"].Position = UDim2.new(0, 0, 0, 0)
				LABEL["_Title1"].Size = UDim2.new(1, 0, 1, 0)
				LABEL["_Title1"].Name = Library:RandomName()
				LABEL["_Title1"].TextWrapped = true
				LABEL["_Title1"].TextYAlignment = Enum.TextYAlignment.Top
				LABEL["_Title1"].Parent = LABEL["_Label"]

				LABEL["_UIPadding7"].Name = Library:RandomName()
				LABEL["_UIPadding7"].PaddingLeft = UDim.new(0, 5)
				LABEL["_UIPadding7"].PaddingRight = UDim.new(0, 5)
				LABEL["_UIPadding7"].PaddingTop = UDim.new(0, 0)
				LABEL["_UIPadding7"].Parent = LABEL["_Title1"]

				LABEL["_UICorner8"].CornerRadius = UDim.new(0, 4)
				LABEL["_UICorner8"].Name = Library:RandomName()
				LABEL["_UICorner8"].Parent = LABEL["_Title1"]

				LABEL["_UIPadding8"].Name = Library:RandomName()
				LABEL["_UIPadding8"].PaddingBottom = UDim.new(0, 6)
				LABEL["_UIPadding8"].PaddingLeft = UDim.new(0, 6)
				LABEL["_UIPadding8"].PaddingRight = UDim.new(0, 6)
				LABEL["_UIPadding8"].PaddingTop = UDim.new(0, 6)
				LABEL["_UIPadding8"].Parent = LABEL["_Label"]
			end

			--Methods
			function LABEL:SetText(text)
				options.Message = text
				LABEL:_update()
			end

			function LABEL:_update()
				LABEL["_Title1"].Text = options.Message
				--[[
				LABEL["_Title1"].Size = UDim2.new(LABEL["_Title1"].Size.X.Scale, LABEL["_Title1"].Size.X.Offset, 0, math.huge)
				LABEL["_Title1"].Size = UDim2.new(LABEL["_Title1"].Size.X.Scale, LABEL["_Title1"].Size.X.Offset, 0, LABEL["_Title1"].TextBounds.Y)
				LABEL["_Label"].Size = UDim2.new(LABEL["_Label"].Size.X.Scale, LABEL["_Label"].Size.X.Offset, 0, LABEL["_Title1"].TextBounds.Y + 12)
				]]
			end

			if options.Message then
				LABEL:SetText(options.Message)
			end

			return LABEL
		end

		function TAB:CreateSlider(options)
			options = Library:Validate(
				{
					Name = "Slider",
					min = 0,
					max = 100,
					default = 50,
					callback = function() end
				}, options or {})

			local SLIDER = {
				Hover = false,
				MouseDown = false,
				Connection = nil
			}

			--Render
			do
				SLIDER["_Slider"] = Instance.new("Frame");
				SLIDER["_Button"] = Instance.new("ImageButton");
				SLIDER["_UICorner8"] = Instance.new("UICorner");
				SLIDER["_UICorner5"] = Instance.new("UICorner");
				SLIDER["_UIStroke2"] = Instance.new("UIStroke");
				SLIDER["_Title2"] = Instance.new("TextLabel");
				SLIDER["_UIPadding9"] = Instance.new("UIPadding");
				SLIDER["_UIPadding10"] = Instance.new("UIPadding");
				SLIDER["_Value"] = Instance.new("TextLabel");
				SLIDER["_SliderBack"] = Instance.new("Frame");
				SLIDER["_UICorner6"] = Instance.new("UICorner");
				SLIDER["_UIStroke3"] = Instance.new("UIStroke");
				SLIDER["_Draggable"] = Instance.new("Frame");
				SLIDER["_UICorner7"] = Instance.new("UICorner");

				SLIDER["_Slider"].BackgroundColor3 = Color3.fromRGB(10, 10, 10)
				SLIDER["_Slider"].BackgroundTransparency = 0.1
				SLIDER["_Slider"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Slider"].BorderSizePixel = 0
				SLIDER["_Slider"].Size = UDim2.new(1, 0, 0, 45)
				SLIDER["_Slider"].Name = Library:RandomName()
				SLIDER["_Slider"].Parent = TAB["_HomeTab"]

				SLIDER["_UICorner8"].Name = Library:RandomName()
				SLIDER["_UICorner8"].CornerRadius = UDim.new(0, 4)
				SLIDER["_UICorner8"].Parent = SLIDER["_Button"]

				SLIDER["_UICorner5"].Name = Library:RandomName()
				SLIDER["_UICorner5"].CornerRadius = UDim.new(0, 4)
				SLIDER["_UICorner5"].Parent = SLIDER["_Slider"]

				SLIDER["_UIStroke2"].Name = Library:RandomName()
				SLIDER["_UIStroke2"].Color = Color3.fromRGB(80, 80, 80)
				SLIDER["_UIStroke2"].Parent = SLIDER["_Slider"]

				SLIDER["_Title2"].Font = Enum.Font.Ubuntu
				SLIDER["_Title2"].Text = options.Name
				SLIDER["_Title2"].TextColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Title2"].TextSize = 20
				SLIDER["_Title2"].TextXAlignment = Enum.TextXAlignment.Left
				SLIDER["_Title2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Title2"].BackgroundTransparency = 1
				SLIDER["_Title2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Title2"].BorderSizePixel = 0
				SLIDER["_Title2"].Position = UDim2.new(0, 0, 0, 0)
				SLIDER["_Title2"].Size = UDim2.new(1, -40, 1, 0)
				SLIDER["_Title2"].Name = Library:RandomName()
				SLIDER["_Title2"].Parent = SLIDER["_Slider"]

				SLIDER["_UIPadding9"].Name = Library:RandomName()
				SLIDER["_UIPadding9"].PaddingLeft = UDim.new(0, 10)
				SLIDER["_UIPadding9"].PaddingTop = UDim.new(0, -10)
				SLIDER["_UIPadding9"].Parent = SLIDER["_Title2"]

				SLIDER["_Value"].Font = Enum.Font.Ubuntu
				SLIDER["_Value"].Text = "100"
				SLIDER["_Value"].TextColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Value"].TextSize = 20
				SLIDER["_Value"].AnchorPoint = Vector2.new(1, 0)
				SLIDER["_Value"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SLIDER["_Value"].BackgroundTransparency = 1
				SLIDER["_Value"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Value"].BorderSizePixel = 0
				SLIDER["_Value"].Position = UDim2.new(1, -12, 0.25, -3)
				SLIDER["_Value"].Size = UDim2.new(0, 20, 0, 20)
				SLIDER["_Value"].Name = Library:RandomName()
				SLIDER["_Value"].Parent = SLIDER["_Slider"]

				SLIDER["_SliderBack"].AnchorPoint = Vector2.new(0, 1)
				SLIDER["_SliderBack"].BackgroundColor3 = Color3.fromRGB(27.000002190470695, 27.000002190470695, 27.000002190470695)
				SLIDER["_SliderBack"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_SliderBack"].BorderSizePixel = 0
				SLIDER["_SliderBack"].Position = UDim2.new(0, 6, 1, -5)
				SLIDER["_SliderBack"].Size = UDim2.new(1, -12, 0, 5)
				SLIDER["_SliderBack"].Name = Library:RandomName()
				SLIDER["_SliderBack"].Parent = SLIDER["_Slider"]

				SLIDER["_UICorner6"].Name = Library:RandomName()
				SLIDER["_UICorner6"].Parent = SLIDER["_SliderBack"]

				SLIDER["_UIStroke3"].Name = Library:RandomName()
				SLIDER["_UIStroke3"].Color = Color3.fromRGB(56, 56, 56)
				SLIDER["_UIStroke3"].Parent = SLIDER["_SliderBack"]

				SLIDER["_Draggable"].BackgroundColor3 = Color3.fromRGB(84, 84, 84)
				SLIDER["_Draggable"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				SLIDER["_Draggable"].BorderSizePixel = 0
				SLIDER["_Draggable"].Size = UDim2.new(0.5, 0, 1, 0)
				SLIDER["_Draggable"].Name = Library:RandomName()
				SLIDER["_Draggable"].Parent = SLIDER["_SliderBack"]

				SLIDER["_UICorner7"].Name = Library:RandomName()
				SLIDER["_UICorner7"].Parent = SLIDER["_Draggable"]

				SLIDER["_Button"].ImageTransparency = 1
				SLIDER["_Button"].BackgroundTransparency = 1
				SLIDER["_Button"].Position = UDim2.new(0, 0, 0, 0)
				SLIDER["_Button"].Size = UDim2.new(1, 0, 1, 0)
				SLIDER["_Button"].Name = Library:RandomName()
				SLIDER["_Button"].Parent = SLIDER["_Slider"]
			end

			--Methods
			function SLIDER:SetValue(v)
				if v == nil then
					local precentage = math.clamp((mouse.X - SLIDER["_SliderBack"].AbsolutePosition.X) / (SLIDER["_SliderBack"].AbsoluteSize.X), 0, 1)
					local value = math.floor(((options.max - options.min) * precentage) + options.min)

					SLIDER["_Value"].Text = value
					SLIDER["_Draggable"].Size = UDim2.fromScale(precentage, 1)
				else
					SLIDER["_Value"].Text = v
					SLIDER["_Draggable"].Size = UDim2.fromScale(((v - options.min) / (options.max - options.min)), 1)
				end
				options.callback(tonumber(SLIDER["_Value"].Text))
			end

			function SLIDER:GetValue()
				return tonumber(SLIDER["_Value"].Text)
			end

			SLIDER:SetValue(options.default)


			--Logic
			do
				SLIDER["_Button"].MouseButton1Down:Connect(function()
					if not SLIDER.Connection then
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					else
						SLIDER.Connection:Disconnect()
						SLIDER.Connection = nil
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					end
				end)

				SLIDER["_Slider"].MouseEnter:Connect(function()
					SLIDER.Hover = true

					if not SLIDER.MouseDown then
						Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(150, 150, 150)})
						Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(100, 100, 100)})
					end
				end)

				SLIDER["_Slider"].MouseLeave:Connect(function()
					SLIDER.Hover = false

					if not SLIDER.MouseDown then
						Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(80, 80, 80)})
						Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(56, 56, 56)})
					end
				end)

				local Connection

				SLIDER["_Button"].MouseButton1Down:Connect(function()
					SLIDER.MouseDown = true
					Library:tween(SLIDER["_Slider"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(200, 200, 200)})
					Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(200, 200, 200)})
					Library:tween(SLIDER["_Draggable"], {BackgroundColor3 = Color3.fromRGB(200, 200, 200)})

					if not SLIDER.Connection then
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					else
						SLIDER.Connection:Disconnect()
						SLIDER.Connection = nil
						SLIDER.Connection = rs.RenderStepped:Connect(function()
							SLIDER:SetValue()
						end)
					end

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and SLIDER.MouseDown then
							SLIDER.MouseDown = false

							if SLIDER.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(SLIDER["_Slider"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(150, 150, 150)})
								Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(100, 100, 100)})
								Library:tween(SLIDER["_Draggable"], {BackgroundColor3 = Color3.fromRGB(84, 84, 84)})
							else
								Library:tween(SLIDER["_Slider"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(SLIDER["_UIStroke2"], {Color = Color3.fromRGB(80, 80, 80)})
								Library:tween(SLIDER["_UIStroke3"], {Color = Color3.fromRGB(56, 56, 56)})
								Library:tween(SLIDER["_Draggable"], {BackgroundColor3 = Color3.fromRGB(84, 84, 84)})
							end

							options.callback(SLIDER["_Value"].Text)
							if SLIDER.Connection then SLIDER.Connection:Disconnect() SLIDER.Connection = nil end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return SLIDER
		end

		function TAB:CreateToggle(options)
			options = Library:Validate(
				{
					Name = "Toggle",
					default = false,
					callback = function(v) print(v) end
				}, options or {})

			local TOGGLE = {
				Hover = false,
				MouseDown = false,
				state = false
			}

			--Render
			do
				TOGGLE["_ToggleInactive"] = Instance.new("Frame");
				TOGGLE["_Button"] = Instance.new("ImageButton")
				TOGGLE["_UICorner14"] = Instance.new("UICorner");
				TOGGLE["_UIStroke9"] = Instance.new("UIStroke");
				TOGGLE["_Title5"] = Instance.new("TextLabel");
				TOGGLE["_UIPadding15"] = Instance.new("UIPadding");
				TOGGLE["_UIPadding16"] = Instance.new("UIPadding");
				TOGGLE["_CheckmarkHolder1"] = Instance.new("Frame");
				TOGGLE["_UICorner15"] = Instance.new("UICorner");
				TOGGLE["_Checkmark1"] = Instance.new("ImageLabel");

				TOGGLE["_ToggleInactive"].BackgroundColor3 = Color3.fromRGB(10, 10, 10)
				TOGGLE["_ToggleInactive"].BackgroundTransparency = 0.1
				TOGGLE["_ToggleInactive"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_ToggleInactive"].BorderSizePixel = 0
				TOGGLE["_ToggleInactive"].Size = UDim2.new(1, 0, 0, 35)
				TOGGLE["_ToggleInactive"].Name = Library:RandomName()
				TOGGLE["_ToggleInactive"].Parent = TAB["_HomeTab"]

				TOGGLE["_UICorner14"].Name = Library:RandomName()
				TOGGLE["_UICorner14"].CornerRadius = UDim.new(0, 4)
				TOGGLE["_UICorner14"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_UIStroke9"].Name = Library:RandomName()
				TOGGLE["_UIStroke9"].Color = Color3.fromRGB(80, 80, 80)
				TOGGLE["_UIStroke9"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_Title5"].Font = Enum.Font.Ubuntu
				TOGGLE["_Title5"].Text = options.Name
				TOGGLE["_Title5"].TextColor3 = Color3.fromRGB(255, 255, 255)
				TOGGLE["_Title5"].TextSize = 20
				TOGGLE["_Title5"].TextXAlignment = Enum.TextXAlignment.Left
				TOGGLE["_Title5"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TOGGLE["_Title5"].BackgroundTransparency = 1
				TOGGLE["_Title5"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_Title5"].BorderSizePixel = 0
				TOGGLE["_Title5"].Position = UDim2.new(0, 0, 0, 0)
				TOGGLE["_Title5"].Size = UDim2.new(1, -32, 1, 0)
				TOGGLE["_Title5"].Name = Library:RandomName()
				TOGGLE["_Title5"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_UIPadding15"].Name = Library:RandomName()
				TOGGLE["_UIPadding15"].PaddingLeft = UDim.new(0, 10)
				TOGGLE["_UIPadding15"].Parent = TOGGLE["_Title5"]

				TOGGLE["_CheckmarkHolder1"].AnchorPoint = Vector2.new(1, 0)
				TOGGLE["_CheckmarkHolder1"].BackgroundColor3 = Color3.fromRGB(98, 98, 98)
				TOGGLE["_CheckmarkHolder1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_CheckmarkHolder1"].BorderSizePixel = 0
				TOGGLE["_CheckmarkHolder1"].Position = UDim2.new(1, -6, 0.25, -2)
				TOGGLE["_CheckmarkHolder1"].Size = UDim2.new(0, 20, 0, 20)
				TOGGLE["_CheckmarkHolder1"].Name = Library:RandomName()
				TOGGLE["_CheckmarkHolder1"].Parent = TOGGLE["_ToggleInactive"]

				TOGGLE["_UICorner15"].Name = Library:RandomName()
				TOGGLE["_UICorner15"].CornerRadius = UDim.new(0, 4)
				TOGGLE["_UICorner15"].Parent = TOGGLE["_CheckmarkHolder1"]

				TOGGLE["_Checkmark1"].Image = "rbxassetid://18757850793"
				TOGGLE["_Checkmark1"].AnchorPoint = Vector2.new(0.5, 0.5)
				TOGGLE["_Checkmark1"].BackgroundColor3 = Color3.fromRGB(88, 88, 88)
				TOGGLE["_Checkmark1"].BackgroundTransparency = 1
				TOGGLE["_Checkmark1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				TOGGLE["_Checkmark1"].BorderSizePixel = 0
				TOGGLE["_Checkmark1"].Position = UDim2.new(0.5, 0, 0.5, 0)
				TOGGLE["_Checkmark1"].Size = UDim2.new(1, -2, 1, -2)
				TOGGLE["_Checkmark1"].Visible = true
				TOGGLE["_Checkmark1"].ImageTransparency = 1
				TOGGLE["_Checkmark1"].Name = Library:RandomName()
				TOGGLE["_Checkmark1"].Parent = TOGGLE["_CheckmarkHolder1"]

				TOGGLE["_Button"].ImageTransparency = 1
				TOGGLE["_Button"].BackgroundTransparency = 1
				TOGGLE["_Button"].Position = UDim2.new(0, 0, 0, 0)
				TOGGLE["_Button"].Size = UDim2.new(1, 0, 1, 0)
				TOGGLE["_Button"].Name = Library:RandomName()
				TOGGLE["_Button"].Parent = TOGGLE["_ToggleInactive"]
			end

			--Methods
			function TOGGLE:Toggle(v)
				if v == nil then
					TOGGLE.state = not TOGGLE.state
				else
					TOGGLE.state = v
				end

				if TOGGLE.state then
					Library:tween(TOGGLE["_CheckmarkHolder1"], {BackgroundColor3 = Color3.fromRGB(0, 152, 38)})
					Library:tween(TOGGLE["_Checkmark1"], {ImageTransparency = 0})
				else
					Library:tween(TOGGLE["_CheckmarkHolder1"], {BackgroundColor3 = Color3.fromRGB(98, 98, 98)})
					Library:tween(TOGGLE["_Checkmark1"], {ImageTransparency = 1})
				end

				options.callback(TOGGLE.state)
			end

			function TOGGLE:GetToggle()
				return TOGGLE.state
			end

			TOGGLE:Toggle(options.default)


			--Logic
			do
				TOGGLE["_Button"].MouseButton1Click:Connect(function()
					TOGGLE:Toggle()
				end)

				TOGGLE["_ToggleInactive"].MouseEnter:Connect(function()
					TOGGLE.Hover = true

					if not TOGGLE.MouseDown then
						Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(150, 150, 150)})
					end
				end)

				TOGGLE["_ToggleInactive"].MouseLeave:Connect(function()
					TOGGLE.Hover = false

					if not TOGGLE.MouseDown then
						Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(80, 80, 80)})
					end
				end)

				local Connection

				TOGGLE["_Button"].MouseButton1Down:Connect(function()
					TOGGLE.MouseDown = true
					Library:tween(TOGGLE["_ToggleInactive"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(200, 200, 200)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and TOGGLE.MouseDown then
							TOGGLE.MouseDown = false

							if TOGGLE.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(TOGGLE["_ToggleInactive"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(150, 150, 150)})
							else
								Library:tween(TOGGLE["_ToggleInactive"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(TOGGLE["_UIStroke9"], {Color = Color3.fromRGB(80, 80, 80)})
							end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return TOGGLE
		end

		function TAB:CreateDropdown(options)
			options = Library:Validate(
				{
					Name = "Dropdown",
					options = {},
					callback = function(v) print(v) end
				}, options or {})

			local DROPDOWN = {
				Items = options.options,
				Hover = false,
				MouseDown = false,
				state = false,
				HoveringItem = false
			}

			--Render
			do
				DROPDOWN["_Dropdown"] = Instance.new("Frame");
				DROPDOWN["_Button"] = Instance.new("ImageButton")
				DROPDOWN["_UICorner9"] = Instance.new("UICorner")
				DROPDOWN["_UICorner8"] = Instance.new("UICorner");
				DROPDOWN["_UIStroke4"] = Instance.new("UIStroke");
				DROPDOWN["_Title3"] = Instance.new("TextLabel");
				DROPDOWN["_UIPadding11"] = Instance.new("UIPadding");
				DROPDOWN["_UIPadding12"] = Instance.new("UIPadding");
				DROPDOWN["_Icon3"] = Instance.new("ImageLabel");
				DROPDOWN["_OptionHolder"] = Instance.new("ScrollingFrame");
				DROPDOWN["_UIListLayout2"] = Instance.new("UIListLayout");
				DROPDOWN["_UIPadding13"] = Instance.new("UIPadding");

				DROPDOWN["_Dropdown"].BackgroundColor3 = Color3.fromRGB(10.000000353902578, 10.000000353902578, 10.000000353902578)
				DROPDOWN["_Dropdown"].BackgroundTransparency = 0.10000000149011612
				DROPDOWN["_Dropdown"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_Dropdown"].BorderSizePixel = 0
				DROPDOWN["_Dropdown"].ClipsDescendants = true
				DROPDOWN["_Dropdown"].Size = UDim2.new(1, 0, 0, 35)
				DROPDOWN["_Dropdown"].Name = Library:RandomName()
				DROPDOWN["_Dropdown"].Parent = TAB["_HomeTab"]

				DROPDOWN["_UICorner9"].Name = Library:RandomName()
				DROPDOWN["_UICorner9"].CornerRadius = UDim.new(0, 4)
				DROPDOWN["_UICorner9"].Parent = DROPDOWN["_Button"]

				DROPDOWN["_UICorner8"].Name = Library:RandomName()
				DROPDOWN["_UICorner8"].CornerRadius = UDim.new(0, 4)
				DROPDOWN["_UICorner8"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_UIStroke4"].Name = Library:RandomName()
				DROPDOWN["_UIStroke4"].Color = Color3.fromRGB(80.00000283122063, 80.00000283122063, 80.00000283122063)
				DROPDOWN["_UIStroke4"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_Title3"].Font = Enum.Font.Ubuntu
				DROPDOWN["_Title3"].Text = options.Name
				DROPDOWN["_Title3"].TextColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_Title3"].TextSize = 20
				DROPDOWN["_Title3"].TextXAlignment = Enum.TextXAlignment.Left
				DROPDOWN["_Title3"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_Title3"].BackgroundTransparency = 1
				DROPDOWN["_Title3"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_Title3"].BorderSizePixel = 0
				DROPDOWN["_Title3"].Position = UDim2.new(0, 0, 0, 5.75)
				DROPDOWN["_Title3"].Size = UDim2.new(1, -32, 0, 23)
				DROPDOWN["_Title3"].Name = Library:RandomName()
				DROPDOWN["_Title3"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_UIPadding11"].Name = Library:RandomName()
				DROPDOWN["_UIPadding11"].PaddingLeft = UDim.new(0, 10)
				DROPDOWN["_UIPadding11"].Parent = DROPDOWN["_Title3"]

				DROPDOWN["_Icon3"].Image = "rbxassetid://18757413804"
				DROPDOWN["_Icon3"].AnchorPoint = Vector2.new(1, 0)
				DROPDOWN["_Icon3"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_Icon3"].BackgroundTransparency = 1
				DROPDOWN["_Icon3"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_Icon3"].BorderSizePixel = 0
				DROPDOWN["_Icon3"].Position = UDim2.new(1, -6, 0, 7)
				DROPDOWN["_Icon3"].Size = UDim2.new(0, 20, 0, 20)
				DROPDOWN["_Icon3"].Name = Library:RandomName()
				DROPDOWN["_Icon3"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_OptionHolder"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				DROPDOWN["_OptionHolder"].BackgroundTransparency = 1
				DROPDOWN["_OptionHolder"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN["_OptionHolder"].BorderSizePixel = 0
				DROPDOWN["_OptionHolder"].Position = UDim2.new(0, 0, 0, 35)
				DROPDOWN["_OptionHolder"].Size = UDim2.new(1, 0, 1, -35)
				DROPDOWN["_OptionHolder"].Visible = false
				DROPDOWN["_OptionHolder"].ClipsDescendants = true
				DROPDOWN["_OptionHolder"].CanvasSize = UDim2.new(0, 0, 0, 0)
				DROPDOWN["_OptionHolder"].Name = Library:RandomName()
				DROPDOWN["_OptionHolder"].ScrollBarThickness = 0
				DROPDOWN["_OptionHolder"].Parent = DROPDOWN["_Dropdown"]

				DROPDOWN["_UIPadding13"].Name = Library:RandomName()
				DROPDOWN["_UIPadding13"].PaddingBottom = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].PaddingLeft = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].PaddingRight = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].PaddingTop = UDim.new(0, 5)
				DROPDOWN["_UIPadding13"].Parent = DROPDOWN["_OptionHolder"]

				DROPDOWN["_UIListLayout2"].Name = Library:RandomName()
				DROPDOWN["_UIListLayout2"].Padding = UDim.new(0, 5)
				DROPDOWN["_UIListLayout2"].SortOrder = Enum.SortOrder.LayoutOrder
				DROPDOWN["_UIListLayout2"].Parent = DROPDOWN["_OptionHolder"]

				DROPDOWN["_Button"].ImageTransparency = 1
				DROPDOWN["_Button"].BackgroundTransparency = 1
				DROPDOWN["_Button"].Position = UDim2.new(0, 0, 0, 0)
				DROPDOWN["_Button"].Size = UDim2.new(1, 0, 0, 35)
				DROPDOWN["_Button"].Name = Library:RandomName()
				DROPDOWN["_Button"].Parent = DROPDOWN["_Dropdown"]
			end


			--Methods
			function DROPDOWN:Add(id, value)
				local Item = {
					Hover = false,
					MouseDown = false
				}

				DROPDOWN.Items[id] = {
					instance = {},
					value = value
				}

				DROPDOWN.Items[id].instance["_Inactive1"] = Instance.new("TextLabel");
				DROPDOWN.Items[id].instance["_Button"] = Instance.new("ImageButton");
				DROPDOWN.Items[id].instance["_UICorner10"] = Instance.new("UICorner");
				DROPDOWN.Items[id].instance["_UICorner9"] = Instance.new("UICorner");
				DROPDOWN.Items[id].instance["_UIStroke5"] = Instance.new("UIStroke");

				DROPDOWN.Items[id].instance["_Inactive1"].Font = Enum.Font.Ubuntu
				DROPDOWN.Items[id].instance["_Inactive1"].Text = id
				DROPDOWN.Items[id].instance["_Inactive1"].TextColor3 = Color3.fromRGB(226.00001692771912, 226.00001692771912, 226.00001692771912)
				DROPDOWN.Items[id].instance["_Inactive1"].TextSize = 15
				DROPDOWN.Items[id].instance["_Inactive1"].BackgroundColor3 = Color3.fromRGB(81.00000277161598, 81.00000277161598, 81.00000277161598)
				DROPDOWN.Items[id].instance["_Inactive1"].BackgroundTransparency = 0.5
				DROPDOWN.Items[id].instance["_Inactive1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
				DROPDOWN.Items[id].instance["_Inactive1"].BorderSizePixel = 0
				DROPDOWN.Items[id].instance["_Inactive1"].Size = UDim2.new(1, 0, 0, 20)
				DROPDOWN.Items[id].instance["_Inactive1"].Name = Library:RandomName()
				DROPDOWN.Items[id].instance["_Inactive1"].Parent = DROPDOWN["_OptionHolder"]

				DROPDOWN.Items[id].instance["_Button"].ImageTransparency = 1
				DROPDOWN.Items[id].instance["_Button"].BackgroundTransparency = 1
				DROPDOWN.Items[id].instance["_Button"].Position = UDim2.new(0, 0, 0, 0)
				DROPDOWN.Items[id].instance["_Button"].Size = UDim2.new(1, 0, 1, 0)
				DROPDOWN.Items[id].instance["_Button"].Name = Library:RandomName()
				DROPDOWN.Items[id].instance["_Button"].Parent = DROPDOWN.Items[id].instance["_Inactive1"]

				DROPDOWN.Items[id].instance["_UICorner10"].Name = Library:RandomName()
				DROPDOWN.Items[id].instance["_UICorner10"].CornerRadius = UDim.new(0, 4)
				DROPDOWN.Items[id].instance["_UICorner10"].Parent = DROPDOWN.Items[id].instance["_Button"]

				DROPDOWN.Items[id].instance["_UICorner9"].CornerRadius = UDim.new(0, 4)
				DROPDOWN.Items[id].instance["_UICorner9"].Parent = DROPDOWN.Items[id].instance["_Inactive1"]

				DROPDOWN.Items[id].instance["_UIStroke5"].ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				DROPDOWN.Items[id].instance["_UIStroke5"].Color = Color3.fromRGB(117, 117, 117)
				DROPDOWN.Items[id].instance["_UIStroke5"].Parent = DROPDOWN.Items[id].instance["_Inactive1"]

				DROPDOWN.Items[id].instance["_Button"].MouseButton1Click:Connect(function()
					options.callback(value)
					DROPDOWN:Toggle()
				end)

				DROPDOWN.Items[id].instance["_Inactive1"].MouseEnter:Connect(function()
					Item.Hover = true
					DROPDOWN.HoveringItem = true

					if not Item.MouseDown then
						Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(255, 255, 255)})
					end
				end)

				DROPDOWN.Items[id].instance["_Inactive1"].MouseLeave:Connect(function()
					Item.Hover = false
					DROPDOWN.HoveringItem = false

					if not Item.MouseDown then
						Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(117, 117, 117)})
					end
				end)

				local Connection

				DROPDOWN.Items[id].instance["_Button"].MouseButton1Down:Connect(function()
					Item.MouseDown = true
					Library:tween(DROPDOWN.Items[id].instance["_Inactive1"], {BackgroundColor3 = Color3.fromRGB(120, 120, 120)})
					Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(255,255,255)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and Item.MouseDown then
							Item.MouseDown = false

							if Item.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(DROPDOWN.Items[id].instance["_Inactive1"], {BackgroundColor3 = Color3.fromRGB(81, 81, 81)})
								Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(25, 255, 255)})
							else
								Library:tween(DROPDOWN.Items[id].instance["_Inactive1"], {BackgroundColor3 = Color3.fromRGB(81, 81, 81)})
								Library:tween(DROPDOWN.Items[id].instance["_UIStroke5"], {Color = Color3.fromRGB(117, 117, 117)})
							end
						end
						if Connection then Connection:Disconnect() Connection = nil end
					end)
				end)
			end

			function DROPDOWN:Remove(id)
				if DROPDOWN.Items[id] ~= nil then
					for i, v in pairs(DROPDOWN.Items[id].instance) do
						v:Destroy()
					end
					DROPDOWN.Items[id] = nil
				end
			end

			function DROPDOWN:Clear()
				for i, v in pairs(DROPDOWN.Items) do
					DROPDOWN:Remove(i)
				end
			end

			function DROPDOWN:Toggle()
				local maxcount = 5
				local count = 0
				for i, v in pairs(DROPDOWN.Items) do
					if v ~= nil then
						count += 1
					end
				end

				if DROPDOWN.state then
					if count <= maxcount then
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset - count * 26))
					else
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset - maxcount * 26))
					end
					DROPDOWN["_OptionHolder"].Visible = false
					Library:tween(DROPDOWN["_Dropdown"], {Size = UDim2.new(1, 0, 0, 35)})
				else
					if count <= maxcount then
						Library:tween(DROPDOWN["_Dropdown"], {Size = UDim2.new(1, 0, 0, 35 + (count * 26))})
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset + count * 26))
					else
						Library:tween(DROPDOWN["_Dropdown"], {Size = UDim2.new(1, 0, 0, 35 + (maxcount * 26))})
						TAB["_HomeTab"].CanvasSize = UDim2.new(0, 0, 0, (TAB["_HomeTab"].CanvasSize.Y.Offset + maxcount * 26))
					end
					DROPDOWN["_OptionHolder"].Visible = true
					DROPDOWN["_OptionHolder"].CanvasSize = UDim2.new(0, 0, 0, (count *  26))
				end

				DROPDOWN.state = not DROPDOWN.state
			end

			for i, v in pairs(options.options) do
				if v then
					DROPDOWN:Add(i, v)
				end
			end


			--Logic
			do
				DROPDOWN["_Button"].MouseButton1Click:Connect(function()
					if not DROPDOWN.HoveringItem then
						DROPDOWN:Toggle()
					end
				end)

				DROPDOWN["_Dropdown"].MouseEnter:Connect(function()
					DROPDOWN.Hover = true

					if not DROPDOWN.MouseDown then
						Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(150, 150, 150)})
					end
				end)

				DROPDOWN["_Dropdown"].MouseLeave:Connect(function()
					DROPDOWN.Hover = false

					if not DROPDOWN.MouseDown then
						Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(80, 80, 80)})
					end
				end)

				local Connection

				DROPDOWN["_Button"].MouseButton1Down:Connect(function()
					DROPDOWN.MouseDown = true
					Library:tween(DROPDOWN["_Dropdown"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
					Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(200, 200, 200)})

					Connection = uis.InputEnded:Connect(function(input, gpe)
						if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and DROPDOWN.MouseDown then
							DROPDOWN.MouseDown = false

							if DROPDOWN.Hover and input.UserInputType ~= Enum.UserInputType.Touch then
								Library:tween(DROPDOWN["_Dropdown"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(150, 150, 150)})
							else
								Library:tween(DROPDOWN["_Dropdown"], {BackgroundColor3 = Color3.fromRGB(10, 10, 10)})
								Library:tween(DROPDOWN["_UIStroke4"], {Color = Color3.fromRGB(80, 80, 80)})
							end
							if Connection then Connection:Disconnect() Connection = nil end
						end
					end)
				end)
			end

			return DROPDOWN
		end

		return TAB
	end

	return GUI
end

return Library
